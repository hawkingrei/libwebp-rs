/* automatically generated by rust-bindgen */

pub const PNG_LIBPNG_VER_STRING: &'static [u8; 7usize] = b"1.6.36\0";
pub const PNG_HEADER_VERSION_STRING: &'static [u8; 43usize] =
    b" libpng version 1.6.36 - December 1, 2018\n\0";
pub const PNG_LIBPNG_VER_SONUM: u32 = 16;
pub const PNG_LIBPNG_VER_DLLNUM: u32 = 16;
pub const PNG_LIBPNG_VER_MAJOR: u32 = 1;
pub const PNG_LIBPNG_VER_MINOR: u32 = 6;
pub const PNG_LIBPNG_VER_RELEASE: u32 = 36;
pub const PNG_LIBPNG_VER_BUILD: u32 = 0;
pub const PNG_LIBPNG_BUILD_ALPHA: u32 = 1;
pub const PNG_LIBPNG_BUILD_BETA: u32 = 2;
pub const PNG_LIBPNG_BUILD_RC: u32 = 3;
pub const PNG_LIBPNG_BUILD_STABLE: u32 = 4;
pub const PNG_LIBPNG_BUILD_RELEASE_STATUS_MASK: u32 = 7;
pub const PNG_LIBPNG_BUILD_PATCH: u32 = 8;
pub const PNG_LIBPNG_BUILD_PRIVATE: u32 = 16;
pub const PNG_LIBPNG_BUILD_SPECIAL: u32 = 32;
pub const PNG_LIBPNG_BUILD_BASE_TYPE: u32 = 4;
pub const PNG_LIBPNG_VER: u32 = 10636;
pub const PNG_API_RULE: u32 = 0;
pub const PNG_DEFAULT_READ_MACROS: u32 = 1;
pub const PNG_GAMMA_THRESHOLD_FIXED: u32 = 5000;
pub const PNG_INFLATE_BUF_SIZE: u32 = 1024;
pub const PNG_MAX_GAMMA_8: u32 = 11;
pub const PNG_QUANTIZE_BLUE_BITS: u32 = 5;
pub const PNG_QUANTIZE_GREEN_BITS: u32 = 5;
pub const PNG_QUANTIZE_RED_BITS: u32 = 5;
pub const PNG_TEXT_Z_DEFAULT_COMPRESSION: i32 = -1;
pub const PNG_TEXT_Z_DEFAULT_STRATEGY: u32 = 0;
pub const PNG_USER_CHUNK_CACHE_MAX: u32 = 1000;
pub const PNG_USER_CHUNK_MALLOC_MAX: u32 = 8000000;
pub const PNG_USER_HEIGHT_MAX: u32 = 1000000;
pub const PNG_USER_WIDTH_MAX: u32 = 1000000;
pub const PNG_ZBUF_SIZE: u32 = 8192;
pub const PNG_ZLIB_VERNUM: u32 = 4784;
pub const PNG_Z_DEFAULT_COMPRESSION: i32 = -1;
pub const PNG_Z_DEFAULT_NOFILTER_STRATEGY: u32 = 0;
pub const PNG_Z_DEFAULT_STRATEGY: u32 = 1;
pub const PNG_sCAL_PRECISION: u32 = 5;
pub const PNG_sRGB_PROFILE_CHECKS: u32 = 2;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 262144;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 101401;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const L_ctermid: u32 = 1024;
pub const __CTERMID_DEFINED: u32 = 1;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const _JBLEN: u32 = 37;
pub const CLOCKS_PER_SEC: u32 = 1000000;
pub const PNG_LIBPNG_BUILD_TYPE: u32 = 4;
pub const PNG_TEXT_COMPRESSION_NONE_WR: i32 = -3;
pub const PNG_TEXT_COMPRESSION_zTXt_WR: i32 = -2;
pub const PNG_TEXT_COMPRESSION_NONE: i32 = -1;
pub const PNG_TEXT_COMPRESSION_zTXt: u32 = 0;
pub const PNG_ITXT_COMPRESSION_NONE: u32 = 1;
pub const PNG_ITXT_COMPRESSION_zTXt: u32 = 2;
pub const PNG_TEXT_COMPRESSION_LAST: u32 = 3;
pub const PNG_HAVE_IHDR: u32 = 1;
pub const PNG_HAVE_PLTE: u32 = 2;
pub const PNG_AFTER_IDAT: u32 = 8;
pub const PNG_FP_1: u32 = 100000;
pub const PNG_FP_HALF: u32 = 50000;
pub const PNG_COLOR_MASK_PALETTE: u32 = 1;
pub const PNG_COLOR_MASK_COLOR: u32 = 2;
pub const PNG_COLOR_MASK_ALPHA: u32 = 4;
pub const PNG_COLOR_TYPE_GRAY: u32 = 0;
pub const PNG_COLOR_TYPE_PALETTE: u32 = 3;
pub const PNG_COLOR_TYPE_RGB: u32 = 2;
pub const PNG_COLOR_TYPE_RGB_ALPHA: u32 = 6;
pub const PNG_COLOR_TYPE_GRAY_ALPHA: u32 = 4;
pub const PNG_COLOR_TYPE_RGBA: u32 = 6;
pub const PNG_COLOR_TYPE_GA: u32 = 4;
pub const PNG_COMPRESSION_TYPE_BASE: u32 = 0;
pub const PNG_COMPRESSION_TYPE_DEFAULT: u32 = 0;
pub const PNG_FILTER_TYPE_BASE: u32 = 0;
pub const PNG_INTRAPIXEL_DIFFERENCING: u32 = 64;
pub const PNG_FILTER_TYPE_DEFAULT: u32 = 0;
pub const PNG_INTERLACE_NONE: u32 = 0;
pub const PNG_INTERLACE_ADAM7: u32 = 1;
pub const PNG_INTERLACE_LAST: u32 = 2;
pub const PNG_OFFSET_PIXEL: u32 = 0;
pub const PNG_OFFSET_MICROMETER: u32 = 1;
pub const PNG_OFFSET_LAST: u32 = 2;
pub const PNG_EQUATION_LINEAR: u32 = 0;
pub const PNG_EQUATION_BASE_E: u32 = 1;
pub const PNG_EQUATION_ARBITRARY: u32 = 2;
pub const PNG_EQUATION_HYPERBOLIC: u32 = 3;
pub const PNG_EQUATION_LAST: u32 = 4;
pub const PNG_SCALE_UNKNOWN: u32 = 0;
pub const PNG_SCALE_METER: u32 = 1;
pub const PNG_SCALE_RADIAN: u32 = 2;
pub const PNG_SCALE_LAST: u32 = 3;
pub const PNG_RESOLUTION_UNKNOWN: u32 = 0;
pub const PNG_RESOLUTION_METER: u32 = 1;
pub const PNG_RESOLUTION_LAST: u32 = 2;
pub const PNG_sRGB_INTENT_PERCEPTUAL: u32 = 0;
pub const PNG_sRGB_INTENT_RELATIVE: u32 = 1;
pub const PNG_sRGB_INTENT_SATURATION: u32 = 2;
pub const PNG_sRGB_INTENT_ABSOLUTE: u32 = 3;
pub const PNG_sRGB_INTENT_LAST: u32 = 4;
pub const PNG_KEYWORD_MAX_LENGTH: u32 = 79;
pub const PNG_MAX_PALETTE_LENGTH: u32 = 256;
pub const PNG_INFO_gAMA: u32 = 1;
pub const PNG_INFO_sBIT: u32 = 2;
pub const PNG_INFO_cHRM: u32 = 4;
pub const PNG_INFO_PLTE: u32 = 8;
pub const PNG_INFO_tRNS: u32 = 16;
pub const PNG_INFO_bKGD: u32 = 32;
pub const PNG_INFO_hIST: u32 = 64;
pub const PNG_INFO_pHYs: u32 = 128;
pub const PNG_INFO_oFFs: u32 = 256;
pub const PNG_INFO_tIME: u32 = 512;
pub const PNG_INFO_pCAL: u32 = 1024;
pub const PNG_INFO_sRGB: u32 = 2048;
pub const PNG_INFO_iCCP: u32 = 4096;
pub const PNG_INFO_sPLT: u32 = 8192;
pub const PNG_INFO_sCAL: u32 = 16384;
pub const PNG_INFO_IDAT: u32 = 32768;
pub const PNG_INFO_eXIf: u32 = 65536;
pub const PNG_TRANSFORM_IDENTITY: u32 = 0;
pub const PNG_TRANSFORM_STRIP_16: u32 = 1;
pub const PNG_TRANSFORM_STRIP_ALPHA: u32 = 2;
pub const PNG_TRANSFORM_PACKING: u32 = 4;
pub const PNG_TRANSFORM_PACKSWAP: u32 = 8;
pub const PNG_TRANSFORM_EXPAND: u32 = 16;
pub const PNG_TRANSFORM_INVERT_MONO: u32 = 32;
pub const PNG_TRANSFORM_SHIFT: u32 = 64;
pub const PNG_TRANSFORM_BGR: u32 = 128;
pub const PNG_TRANSFORM_SWAP_ALPHA: u32 = 256;
pub const PNG_TRANSFORM_SWAP_ENDIAN: u32 = 512;
pub const PNG_TRANSFORM_INVERT_ALPHA: u32 = 1024;
pub const PNG_TRANSFORM_STRIP_FILLER: u32 = 2048;
pub const PNG_TRANSFORM_STRIP_FILLER_BEFORE: u32 = 2048;
pub const PNG_TRANSFORM_STRIP_FILLER_AFTER: u32 = 4096;
pub const PNG_TRANSFORM_GRAY_TO_RGB: u32 = 8192;
pub const PNG_TRANSFORM_EXPAND_16: u32 = 16384;
pub const PNG_TRANSFORM_SCALE_16: u32 = 32768;
pub const PNG_FLAG_MNG_EMPTY_PLTE: u32 = 1;
pub const PNG_FLAG_MNG_FILTER_64: u32 = 4;
pub const PNG_ALL_MNG_FEATURES: u32 = 5;
pub const PNG_ERROR_ACTION_NONE: u32 = 1;
pub const PNG_ERROR_ACTION_WARN: u32 = 2;
pub const PNG_ERROR_ACTION_ERROR: u32 = 3;
pub const PNG_RGB_TO_GRAY_DEFAULT: i32 = -1;
pub const PNG_ALPHA_PNG: u32 = 0;
pub const PNG_ALPHA_STANDARD: u32 = 1;
pub const PNG_ALPHA_ASSOCIATED: u32 = 1;
pub const PNG_ALPHA_PREMULTIPLIED: u32 = 1;
pub const PNG_ALPHA_OPTIMIZED: u32 = 2;
pub const PNG_ALPHA_BROKEN: u32 = 3;
pub const PNG_DEFAULT_sRGB: i32 = -1;
pub const PNG_GAMMA_MAC_18: i32 = -2;
pub const PNG_GAMMA_sRGB: u32 = 220000;
pub const PNG_GAMMA_LINEAR: u32 = 100000;
pub const PNG_FILLER_BEFORE: u32 = 0;
pub const PNG_FILLER_AFTER: u32 = 1;
pub const PNG_BACKGROUND_GAMMA_UNKNOWN: u32 = 0;
pub const PNG_BACKGROUND_GAMMA_SCREEN: u32 = 1;
pub const PNG_BACKGROUND_GAMMA_FILE: u32 = 2;
pub const PNG_BACKGROUND_GAMMA_UNIQUE: u32 = 3;
pub const PNG_GAMMA_THRESHOLD: f64 = 0.05;
pub const PNG_CRC_DEFAULT: u32 = 0;
pub const PNG_CRC_ERROR_QUIT: u32 = 1;
pub const PNG_CRC_WARN_DISCARD: u32 = 2;
pub const PNG_CRC_WARN_USE: u32 = 3;
pub const PNG_CRC_QUIET_USE: u32 = 4;
pub const PNG_CRC_NO_CHANGE: u32 = 5;
pub const PNG_NO_FILTERS: u32 = 0;
pub const PNG_FILTER_NONE: u32 = 8;
pub const PNG_FILTER_SUB: u32 = 16;
pub const PNG_FILTER_UP: u32 = 32;
pub const PNG_FILTER_AVG: u32 = 64;
pub const PNG_FILTER_PAETH: u32 = 128;
pub const PNG_FAST_FILTERS: u32 = 56;
pub const PNG_ALL_FILTERS: u32 = 248;
pub const PNG_FILTER_VALUE_NONE: u32 = 0;
pub const PNG_FILTER_VALUE_SUB: u32 = 1;
pub const PNG_FILTER_VALUE_UP: u32 = 2;
pub const PNG_FILTER_VALUE_AVG: u32 = 3;
pub const PNG_FILTER_VALUE_PAETH: u32 = 4;
pub const PNG_FILTER_VALUE_LAST: u32 = 5;
pub const PNG_FILTER_HEURISTIC_DEFAULT: u32 = 0;
pub const PNG_FILTER_HEURISTIC_UNWEIGHTED: u32 = 1;
pub const PNG_FILTER_HEURISTIC_WEIGHTED: u32 = 2;
pub const PNG_FILTER_HEURISTIC_LAST: u32 = 3;
pub const PNG_DESTROY_WILL_FREE_DATA: u32 = 1;
pub const PNG_SET_WILL_FREE_DATA: u32 = 1;
pub const PNG_USER_WILL_FREE_DATA: u32 = 2;
pub const PNG_FREE_HIST: u32 = 8;
pub const PNG_FREE_ICCP: u32 = 16;
pub const PNG_FREE_SPLT: u32 = 32;
pub const PNG_FREE_ROWS: u32 = 64;
pub const PNG_FREE_PCAL: u32 = 128;
pub const PNG_FREE_SCAL: u32 = 256;
pub const PNG_FREE_UNKN: u32 = 512;
pub const PNG_FREE_PLTE: u32 = 4096;
pub const PNG_FREE_TRNS: u32 = 8192;
pub const PNG_FREE_TEXT: u32 = 16384;
pub const PNG_FREE_EXIF: u32 = 32768;
pub const PNG_FREE_ALL: u32 = 65535;
pub const PNG_FREE_MUL: u32 = 16928;
pub const PNG_HANDLE_CHUNK_AS_DEFAULT: u32 = 0;
pub const PNG_HANDLE_CHUNK_NEVER: u32 = 1;
pub const PNG_HANDLE_CHUNK_IF_SAFE: u32 = 2;
pub const PNG_HANDLE_CHUNK_ALWAYS: u32 = 3;
pub const PNG_HANDLE_CHUNK_LAST: u32 = 4;
pub const PNG_IO_NONE: u32 = 0;
pub const PNG_IO_READING: u32 = 1;
pub const PNG_IO_WRITING: u32 = 2;
pub const PNG_IO_SIGNATURE: u32 = 16;
pub const PNG_IO_CHUNK_HDR: u32 = 32;
pub const PNG_IO_CHUNK_DATA: u32 = 64;
pub const PNG_IO_CHUNK_CRC: u32 = 128;
pub const PNG_IO_MASK_OP: u32 = 15;
pub const PNG_IO_MASK_LOC: u32 = 240;
pub const PNG_INTERLACE_ADAM7_PASSES: u32 = 7;
pub const PNG_IMAGE_VERSION: u32 = 1;
pub const PNG_IMAGE_WARNING: u32 = 1;
pub const PNG_IMAGE_ERROR: u32 = 2;
pub const PNG_FORMAT_FLAG_ALPHA: u32 = 1;
pub const PNG_FORMAT_FLAG_COLOR: u32 = 2;
pub const PNG_FORMAT_FLAG_LINEAR: u32 = 4;
pub const PNG_FORMAT_FLAG_COLORMAP: u32 = 8;
pub const PNG_FORMAT_FLAG_BGR: u32 = 16;
pub const PNG_FORMAT_FLAG_AFIRST: u32 = 32;
pub const PNG_FORMAT_FLAG_ASSOCIATED_ALPHA: u32 = 64;
pub const PNG_FORMAT_GRAY: u32 = 0;
pub const PNG_FORMAT_GA: u32 = 1;
pub const PNG_FORMAT_AG: u32 = 33;
pub const PNG_FORMAT_RGB: u32 = 2;
pub const PNG_FORMAT_BGR: u32 = 18;
pub const PNG_FORMAT_RGBA: u32 = 3;
pub const PNG_FORMAT_ARGB: u32 = 35;
pub const PNG_FORMAT_BGRA: u32 = 19;
pub const PNG_FORMAT_ABGR: u32 = 51;
pub const PNG_FORMAT_LINEAR_Y: u32 = 4;
pub const PNG_FORMAT_LINEAR_Y_ALPHA: u32 = 5;
pub const PNG_FORMAT_LINEAR_RGB: u32 = 6;
pub const PNG_FORMAT_LINEAR_RGB_ALPHA: u32 = 7;
pub const PNG_FORMAT_RGB_COLORMAP: u32 = 10;
pub const PNG_FORMAT_BGR_COLORMAP: u32 = 26;
pub const PNG_FORMAT_RGBA_COLORMAP: u32 = 11;
pub const PNG_FORMAT_ARGB_COLORMAP: u32 = 43;
pub const PNG_FORMAT_BGRA_COLORMAP: u32 = 27;
pub const PNG_FORMAT_ABGR_COLORMAP: u32 = 59;
pub const PNG_IMAGE_FLAG_COLORSPACE_NOT_sRGB: u32 = 1;
pub const PNG_IMAGE_FLAG_FAST: u32 = 2;
pub const PNG_IMAGE_FLAG_16BIT_sRGB: u32 = 4;
pub const PNG_MAXIMUM_INFLATE_WINDOW: u32 = 2;
pub const PNG_SKIP_sRGB_CHECK_PROFILE: u32 = 4;
pub const PNG_IGNORE_ADLER32: u32 = 8;
pub const PNG_OPTION_NEXT: u32 = 12;
pub const PNG_OPTION_UNSET: u32 = 0;
pub const PNG_OPTION_INVALID: u32 = 1;
pub const PNG_OPTION_OFF: u32 = 2;
pub const PNG_OPTION_ON: u32 = 3;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __darwin_pthread_handler_rec {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_cond_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_mutex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_rwlock_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
impl Default for _opaque_pthread_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type va_list = __darwin_va_list;
extern "C" {
    #[link_name = "\u{1}_renameat"]
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_renamex_np"]
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_renameatx_np"]
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
impl Default for __sbuf {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
impl Default for __sFILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type FILE = __sFILE;
extern "C" {
    #[link_name = "\u{1}___stdinp"]
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___stdoutp"]
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___stderrp"]
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_clearerr"]
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_fclose"]
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_feof"]
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ferror"]
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fflush"]
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgetc"]
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgetpos"]
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgets"]
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fopen"]
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fprintf"]
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fputc"]
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fputs"]
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fread"]
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_freopen"]
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fscanf"]
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fseek"]
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsetpos"]
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ftell"]
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_fwrite"]
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_getc"]
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getchar"]
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gets"]
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_perror"]
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_printf"]
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putc"]
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putchar"]
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_puts"]
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_remove"]
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rename"]
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rewind"]
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_scanf"]
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setbuf"]
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_setvbuf"]
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sprintf"]
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sscanf"]
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tmpfile"]
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_tmpnam"]
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ungetc"]
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vfprintf"]
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vprintf"]
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsprintf"]
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ctermid"]
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fdopen"]
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fileno"]
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pclose"]
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_popen"]
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___srget"]
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___svfscanf"]
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___swbuf"]
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flockfile"]
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_ftrylockfile"]
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_funlockfile"]
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_getc_unlocked"]
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getchar_unlocked"]
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putc_unlocked"]
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putchar_unlocked"]
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getw"]
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putw"]
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tempnam"]
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    #[link_name = "\u{1}_fseeko"]
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ftello"]
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    #[link_name = "\u{1}_snprintf"]
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vfscanf"]
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vscanf"]
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsnprintf"]
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsscanf"]
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_dprintf"]
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vdprintf"]
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdelim"]
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_getline"]
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_fmemopen"]
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_open_memstream"]
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_sys_nerr"]
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "\u{1}_asprintf"]
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ctermid_r"]
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fgetln"]
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fmtcheck"]
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fpurge"]
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setbuffer"]
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_setlinebuf"]
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vasprintf"]
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zopen"]
    pub fn zopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_funopen"]
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___sprintf_chk"]
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___snprintf_chk"]
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___vsprintf_chk"]
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___vsnprintf_chk"]
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
extern "C" {
    #[link_name = "\u{1}_setjmp"]
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_longjmp"]
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}__setjmp"]
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__longjmp"]
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_sigsetjmp"]
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_siglongjmp"]
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_longjmperror"]
    pub fn longjmperror();
}
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
impl Default for tm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    #[link_name = "\u{1}_tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "\u{1}_getdate_err"]
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_asctime"]
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_clock"]
    pub fn clock() -> clock_t;
}
extern "C" {
    #[link_name = "\u{1}_ctime"]
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_difftime"]
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_getdate"]
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_gmtime"]
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_localtime"]
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_mktime"]
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_strftime"]
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_strptime"]
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_time"]
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_tzset"]
    pub fn tzset();
}
extern "C" {
    #[link_name = "\u{1}_asctime_r"]
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ctime_r"]
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_gmtime_r"]
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_localtime_r"]
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_posix2time"]
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_tzsetwall"]
    pub fn tzsetwall();
}
extern "C" {
    #[link_name = "\u{1}_time2posix"]
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_timelocal"]
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_timegm"]
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_nanosleep"]
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = u32;
extern "C" {
    #[link_name = "\u{1}_clock_getres"]
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_clock_gettime"]
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_clock_gettime_nsec_np"]
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    #[link_name = "\u{1}_clock_settime"]
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
pub type png_byte = ::std::os::raw::c_uchar;
pub type png_int_16 = ::std::os::raw::c_short;
pub type png_uint_16 = ::std::os::raw::c_ushort;
pub type png_int_32 = ::std::os::raw::c_int;
pub type png_uint_32 = ::std::os::raw::c_uint;
pub type png_size_t = usize;
pub type png_ptrdiff_t = isize;
pub type png_alloc_size_t = usize;
pub type png_fixed_point = png_int_32;
pub type png_voidp = *mut ::std::os::raw::c_void;
pub type png_const_voidp = *const ::std::os::raw::c_void;
pub type png_bytep = *mut png_byte;
pub type png_const_bytep = *const png_byte;
pub type png_uint_32p = *mut png_uint_32;
pub type png_const_uint_32p = *const png_uint_32;
pub type png_int_32p = *mut png_int_32;
pub type png_const_int_32p = *const png_int_32;
pub type png_uint_16p = *mut png_uint_16;
pub type png_const_uint_16p = *const png_uint_16;
pub type png_int_16p = *mut png_int_16;
pub type png_const_int_16p = *const png_int_16;
pub type png_charp = *mut ::std::os::raw::c_char;
pub type png_const_charp = *const ::std::os::raw::c_char;
pub type png_fixed_point_p = *mut png_fixed_point;
pub type png_const_fixed_point_p = *const png_fixed_point;
pub type png_size_tp = *mut usize;
pub type png_const_size_tp = *const usize;
pub type png_FILE_p = *mut FILE;
pub type png_doublep = *mut f64;
pub type png_const_doublep = *const f64;
pub type png_bytepp = *mut *mut png_byte;
pub type png_uint_32pp = *mut *mut png_uint_32;
pub type png_int_32pp = *mut *mut png_int_32;
pub type png_uint_16pp = *mut *mut png_uint_16;
pub type png_int_16pp = *mut *mut png_int_16;
pub type png_const_charpp = *mut *const ::std::os::raw::c_char;
pub type png_charpp = *mut *mut ::std::os::raw::c_char;
pub type png_fixed_point_pp = *mut *mut png_fixed_point;
pub type png_doublepp = *mut *mut f64;
pub type png_charppp = *mut *mut *mut ::std::os::raw::c_char;
pub type png_libpng_version_1_6_36 = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct png_struct_def {
    _unused: [u8; 0],
}
pub type png_struct = png_struct_def;
pub type png_const_structp = *const png_struct;
pub type png_structp = *mut png_struct;
pub type png_structpp = *mut *mut png_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct png_info_def {
    _unused: [u8; 0],
}
pub type png_info = png_info_def;
pub type png_infop = *mut png_info;
pub type png_const_infop = *const png_info;
pub type png_infopp = *mut *mut png_info;
pub type png_structrp = *mut png_struct;
pub type png_const_structrp = *const png_struct;
pub type png_inforp = *mut png_info;
pub type png_const_inforp = *const png_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct png_color_struct {
    pub red: png_byte,
    pub green: png_byte,
    pub blue: png_byte,
}
#[test]
fn bindgen_test_layout_png_color_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_color_struct>(),
        3usize,
        concat!("Size of: ", stringify!(png_color_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_color_struct>(),
        1usize,
        concat!("Alignment of ", stringify!(png_color_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_struct>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_struct),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_struct>())).green as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_struct),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_struct>())).blue as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_struct),
            "::",
            stringify!(blue)
        )
    );
}
pub type png_color = png_color_struct;
pub type png_colorp = *mut png_color;
pub type png_const_colorp = *const png_color;
pub type png_colorpp = *mut *mut png_color;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct png_color_16_struct {
    pub index: png_byte,
    pub red: png_uint_16,
    pub green: png_uint_16,
    pub blue: png_uint_16,
    pub gray: png_uint_16,
}
#[test]
fn bindgen_test_layout_png_color_16_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_color_16_struct>(),
        10usize,
        concat!("Size of: ", stringify!(png_color_16_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_color_16_struct>(),
        2usize,
        concat!("Alignment of ", stringify!(png_color_16_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_16_struct>())).index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_16_struct),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_16_struct>())).red as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_16_struct),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_16_struct>())).green as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_16_struct),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_16_struct>())).blue as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_16_struct),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_16_struct>())).gray as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_16_struct),
            "::",
            stringify!(gray)
        )
    );
}
pub type png_color_16 = png_color_16_struct;
pub type png_color_16p = *mut png_color_16;
pub type png_const_color_16p = *const png_color_16;
pub type png_color_16pp = *mut *mut png_color_16;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct png_color_8_struct {
    pub red: png_byte,
    pub green: png_byte,
    pub blue: png_byte,
    pub gray: png_byte,
    pub alpha: png_byte,
}
#[test]
fn bindgen_test_layout_png_color_8_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_color_8_struct>(),
        5usize,
        concat!("Size of: ", stringify!(png_color_8_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_color_8_struct>(),
        1usize,
        concat!("Alignment of ", stringify!(png_color_8_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_8_struct>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_8_struct),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_8_struct>())).green as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_8_struct),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_8_struct>())).blue as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_8_struct),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_8_struct>())).gray as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_8_struct),
            "::",
            stringify!(gray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_8_struct>())).alpha as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_8_struct),
            "::",
            stringify!(alpha)
        )
    );
}
pub type png_color_8 = png_color_8_struct;
pub type png_color_8p = *mut png_color_8;
pub type png_const_color_8p = *const png_color_8;
pub type png_color_8pp = *mut *mut png_color_8;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct png_sPLT_entry_struct {
    pub red: png_uint_16,
    pub green: png_uint_16,
    pub blue: png_uint_16,
    pub alpha: png_uint_16,
    pub frequency: png_uint_16,
}
#[test]
fn bindgen_test_layout_png_sPLT_entry_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_sPLT_entry_struct>(),
        10usize,
        concat!("Size of: ", stringify!(png_sPLT_entry_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_sPLT_entry_struct>(),
        2usize,
        concat!("Alignment of ", stringify!(png_sPLT_entry_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_entry_struct>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_entry_struct),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_entry_struct>())).green as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_entry_struct),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_entry_struct>())).blue as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_entry_struct),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_entry_struct>())).alpha as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_entry_struct),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_entry_struct>())).frequency as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_entry_struct),
            "::",
            stringify!(frequency)
        )
    );
}
pub type png_sPLT_entry = png_sPLT_entry_struct;
pub type png_sPLT_entryp = *mut png_sPLT_entry;
pub type png_const_sPLT_entryp = *const png_sPLT_entry;
pub type png_sPLT_entrypp = *mut *mut png_sPLT_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct png_sPLT_struct {
    pub name: png_charp,
    pub depth: png_byte,
    pub entries: png_sPLT_entryp,
    pub nentries: png_int_32,
}
#[test]
fn bindgen_test_layout_png_sPLT_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_sPLT_struct>(),
        32usize,
        concat!("Size of: ", stringify!(png_sPLT_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_sPLT_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(png_sPLT_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_struct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_struct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_struct>())).depth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_struct),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_struct>())).entries as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_struct),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_struct>())).nentries as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_struct),
            "::",
            stringify!(nentries)
        )
    );
}
impl Default for png_sPLT_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type png_sPLT_t = png_sPLT_struct;
pub type png_sPLT_tp = *mut png_sPLT_t;
pub type png_const_sPLT_tp = *const png_sPLT_t;
pub type png_sPLT_tpp = *mut *mut png_sPLT_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct png_text_struct {
    pub compression: ::std::os::raw::c_int,
    pub key: png_charp,
    pub text: png_charp,
    pub text_length: usize,
    pub itxt_length: usize,
    pub lang: png_charp,
    pub lang_key: png_charp,
}
#[test]
fn bindgen_test_layout_png_text_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_text_struct>(),
        56usize,
        concat!("Size of: ", stringify!(png_text_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_text_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(png_text_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).compression as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(compression)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).text as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).text_length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(text_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).itxt_length as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(itxt_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).lang as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).lang_key as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(lang_key)
        )
    );
}
impl Default for png_text_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type png_text = png_text_struct;
pub type png_textp = *mut png_text;
pub type png_const_textp = *const png_text;
pub type png_textpp = *mut *mut png_text;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct png_time_struct {
    pub year: png_uint_16,
    pub month: png_byte,
    pub day: png_byte,
    pub hour: png_byte,
    pub minute: png_byte,
    pub second: png_byte,
}
#[test]
fn bindgen_test_layout_png_time_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_time_struct>(),
        8usize,
        concat!("Size of: ", stringify!(png_time_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_time_struct>(),
        2usize,
        concat!("Alignment of ", stringify!(png_time_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_time_struct>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_time_struct),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_time_struct>())).month as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(png_time_struct),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_time_struct>())).day as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(png_time_struct),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_time_struct>())).hour as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(png_time_struct),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_time_struct>())).minute as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(png_time_struct),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_time_struct>())).second as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(png_time_struct),
            "::",
            stringify!(second)
        )
    );
}
pub type png_time = png_time_struct;
pub type png_timep = *mut png_time;
pub type png_const_timep = *const png_time;
pub type png_timepp = *mut *mut png_time;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct png_unknown_chunk_t {
    pub name: [png_byte; 5usize],
    pub data: *mut png_byte,
    pub size: usize,
    pub location: png_byte,
}
#[test]
fn bindgen_test_layout_png_unknown_chunk_t() {
    assert_eq!(
        ::std::mem::size_of::<png_unknown_chunk_t>(),
        32usize,
        concat!("Size of: ", stringify!(png_unknown_chunk_t))
    );
    assert_eq!(
        ::std::mem::align_of::<png_unknown_chunk_t>(),
        8usize,
        concat!("Alignment of ", stringify!(png_unknown_chunk_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_unknown_chunk_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_unknown_chunk_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_unknown_chunk_t>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_unknown_chunk_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_unknown_chunk_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(png_unknown_chunk_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_unknown_chunk_t>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(png_unknown_chunk_t),
            "::",
            stringify!(location)
        )
    );
}
impl Default for png_unknown_chunk_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type png_unknown_chunk = png_unknown_chunk_t;
pub type png_unknown_chunkp = *mut png_unknown_chunk;
pub type png_const_unknown_chunkp = *const png_unknown_chunk;
pub type png_unknown_chunkpp = *mut *mut png_unknown_chunk;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct png_row_info_struct {
    pub width: png_uint_32,
    pub rowbytes: usize,
    pub color_type: png_byte,
    pub bit_depth: png_byte,
    pub channels: png_byte,
    pub pixel_depth: png_byte,
}
#[test]
fn bindgen_test_layout_png_row_info_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_row_info_struct>(),
        24usize,
        concat!("Size of: ", stringify!(png_row_info_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_row_info_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(png_row_info_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_row_info_struct>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_row_info_struct),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_row_info_struct>())).rowbytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_row_info_struct),
            "::",
            stringify!(rowbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_row_info_struct>())).color_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(png_row_info_struct),
            "::",
            stringify!(color_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_row_info_struct>())).bit_depth as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(png_row_info_struct),
            "::",
            stringify!(bit_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_row_info_struct>())).channels as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(png_row_info_struct),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_row_info_struct>())).pixel_depth as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(png_row_info_struct),
            "::",
            stringify!(pixel_depth)
        )
    );
}
pub type png_row_info = png_row_info_struct;
pub type png_row_infop = *mut png_row_info;
pub type png_row_infopp = *mut *mut png_row_info;
pub type png_error_ptr =
    ::std::option::Option<unsafe extern "C" fn(arg1: png_structp, arg2: png_const_charp)>;
pub type png_rw_ptr =
    ::std::option::Option<unsafe extern "C" fn(arg1: png_structp, arg2: png_bytep, arg3: usize)>;
pub type png_flush_ptr = ::std::option::Option<unsafe extern "C" fn(arg1: png_structp)>;
pub type png_read_status_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: png_structp, arg2: png_uint_32, arg3: ::std::os::raw::c_int),
>;
pub type png_write_status_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: png_structp, arg2: png_uint_32, arg3: ::std::os::raw::c_int),
>;
pub type png_progressive_info_ptr =
    ::std::option::Option<unsafe extern "C" fn(arg1: png_structp, arg2: png_infop)>;
pub type png_progressive_end_ptr =
    ::std::option::Option<unsafe extern "C" fn(arg1: png_structp, arg2: png_infop)>;
pub type png_progressive_row_ptr = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: png_structp,
        arg2: png_bytep,
        arg3: png_uint_32,
        arg4: ::std::os::raw::c_int,
    ),
>;
pub type png_user_transform_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: png_structp, arg2: png_row_infop, arg3: png_bytep),
>;
pub type png_user_chunk_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: png_structp, arg2: png_unknown_chunkp) -> ::std::os::raw::c_int,
>;
pub type png_longjmp_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int),
>;
pub type png_malloc_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: png_structp, arg2: png_alloc_size_t) -> png_voidp,
>;
pub type png_free_ptr =
    ::std::option::Option<unsafe extern "C" fn(arg1: png_structp, arg2: png_voidp)>;
extern "C" {
    #[link_name = "\u{1}_png_access_version_number"]
    pub fn png_access_version_number() -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_sig_bytes"]
    pub fn png_set_sig_bytes(png_ptr: png_structrp, num_bytes: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_png_sig_cmp"]
    pub fn png_sig_cmp(
        sig: png_const_bytep,
        start: usize,
        num_to_check: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_create_read_struct"]
    pub fn png_create_read_struct(
        user_png_ver: png_const_charp,
        error_ptr: png_voidp,
        error_fn: png_error_ptr,
        warn_fn: png_error_ptr,
    ) -> png_structp;
}
extern "C" {
    #[link_name = "\u{1}_png_create_write_struct"]
    pub fn png_create_write_struct(
        user_png_ver: png_const_charp,
        error_ptr: png_voidp,
        error_fn: png_error_ptr,
        warn_fn: png_error_ptr,
    ) -> png_structp;
}
extern "C" {
    #[link_name = "\u{1}_png_get_compression_buffer_size"]
    pub fn png_get_compression_buffer_size(png_ptr: png_const_structrp) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_png_set_compression_buffer_size"]
    pub fn png_set_compression_buffer_size(png_ptr: png_structrp, size: usize);
}
extern "C" {
    #[link_name = "\u{1}_png_set_longjmp_fn"]
    pub fn png_set_longjmp_fn(
        png_ptr: png_structrp,
        longjmp_fn: png_longjmp_ptr,
        jmp_buf_size: usize,
    ) -> *mut jmp_buf;
}
extern "C" {
    #[link_name = "\u{1}_png_longjmp"]
    pub fn png_longjmp(png_ptr: png_const_structrp, val: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_png_reset_zstream"]
    pub fn png_reset_zstream(png_ptr: png_structrp) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_create_read_struct_2"]
    pub fn png_create_read_struct_2(
        user_png_ver: png_const_charp,
        error_ptr: png_voidp,
        error_fn: png_error_ptr,
        warn_fn: png_error_ptr,
        mem_ptr: png_voidp,
        malloc_fn: png_malloc_ptr,
        free_fn: png_free_ptr,
    ) -> png_structp;
}
extern "C" {
    #[link_name = "\u{1}_png_create_write_struct_2"]
    pub fn png_create_write_struct_2(
        user_png_ver: png_const_charp,
        error_ptr: png_voidp,
        error_fn: png_error_ptr,
        warn_fn: png_error_ptr,
        mem_ptr: png_voidp,
        malloc_fn: png_malloc_ptr,
        free_fn: png_free_ptr,
    ) -> png_structp;
}
extern "C" {
    #[link_name = "\u{1}_png_write_sig"]
    pub fn png_write_sig(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_write_chunk"]
    pub fn png_write_chunk(
        png_ptr: png_structrp,
        chunk_name: png_const_bytep,
        data: png_const_bytep,
        length: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_write_chunk_start"]
    pub fn png_write_chunk_start(
        png_ptr: png_structrp,
        chunk_name: png_const_bytep,
        length: png_uint_32,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_write_chunk_data"]
    pub fn png_write_chunk_data(png_ptr: png_structrp, data: png_const_bytep, length: usize);
}
extern "C" {
    #[link_name = "\u{1}_png_write_chunk_end"]
    pub fn png_write_chunk_end(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_create_info_struct"]
    pub fn png_create_info_struct(png_ptr: png_const_structrp) -> png_infop;
}
extern "C" {
    #[link_name = "\u{1}_png_info_init_3"]
    pub fn png_info_init_3(info_ptr: png_infopp, png_info_struct_size: usize);
}
extern "C" {
    #[link_name = "\u{1}_png_write_info_before_PLTE"]
    pub fn png_write_info_before_PLTE(png_ptr: png_structrp, info_ptr: png_const_inforp);
}
extern "C" {
    #[link_name = "\u{1}_png_write_info"]
    pub fn png_write_info(png_ptr: png_structrp, info_ptr: png_const_inforp);
}
extern "C" {
    #[link_name = "\u{1}_png_read_info"]
    pub fn png_read_info(png_ptr: png_structrp, info_ptr: png_inforp);
}
extern "C" {
    #[link_name = "\u{1}_png_convert_to_rfc1123"]
    pub fn png_convert_to_rfc1123(png_ptr: png_structrp, ptime: png_const_timep)
        -> png_const_charp;
}
extern "C" {
    #[link_name = "\u{1}_png_convert_to_rfc1123_buffer"]
    pub fn png_convert_to_rfc1123_buffer(
        out: *mut ::std::os::raw::c_char,
        ptime: png_const_timep,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_convert_from_struct_tm"]
    pub fn png_convert_from_struct_tm(ptime: png_timep, ttime: *const tm);
}
extern "C" {
    #[link_name = "\u{1}_png_convert_from_time_t"]
    pub fn png_convert_from_time_t(ptime: png_timep, ttime: time_t);
}
extern "C" {
    #[link_name = "\u{1}_png_set_expand"]
    pub fn png_set_expand(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_expand_gray_1_2_4_to_8"]
    pub fn png_set_expand_gray_1_2_4_to_8(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_palette_to_rgb"]
    pub fn png_set_palette_to_rgb(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_tRNS_to_alpha"]
    pub fn png_set_tRNS_to_alpha(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_expand_16"]
    pub fn png_set_expand_16(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_bgr"]
    pub fn png_set_bgr(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_gray_to_rgb"]
    pub fn png_set_gray_to_rgb(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_rgb_to_gray"]
    pub fn png_set_rgb_to_gray(
        png_ptr: png_structrp,
        error_action: ::std::os::raw::c_int,
        red: f64,
        green: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_rgb_to_gray_fixed"]
    pub fn png_set_rgb_to_gray_fixed(
        png_ptr: png_structrp,
        error_action: ::std::os::raw::c_int,
        red: png_fixed_point,
        green: png_fixed_point,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_rgb_to_gray_status"]
    pub fn png_get_rgb_to_gray_status(png_ptr: png_const_structrp) -> png_byte;
}
extern "C" {
    #[link_name = "\u{1}_png_build_grayscale_palette"]
    pub fn png_build_grayscale_palette(bit_depth: ::std::os::raw::c_int, palette: png_colorp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_alpha_mode"]
    pub fn png_set_alpha_mode(
        png_ptr: png_structrp,
        mode: ::std::os::raw::c_int,
        output_gamma: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_alpha_mode_fixed"]
    pub fn png_set_alpha_mode_fixed(
        png_ptr: png_structrp,
        mode: ::std::os::raw::c_int,
        output_gamma: png_fixed_point,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_strip_alpha"]
    pub fn png_set_strip_alpha(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_swap_alpha"]
    pub fn png_set_swap_alpha(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_invert_alpha"]
    pub fn png_set_invert_alpha(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_filler"]
    pub fn png_set_filler(png_ptr: png_structrp, filler: png_uint_32, flags: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_png_set_add_alpha"]
    pub fn png_set_add_alpha(
        png_ptr: png_structrp,
        filler: png_uint_32,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_swap"]
    pub fn png_set_swap(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_packing"]
    pub fn png_set_packing(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_packswap"]
    pub fn png_set_packswap(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_shift"]
    pub fn png_set_shift(png_ptr: png_structrp, true_bits: png_const_color_8p);
}
extern "C" {
    #[link_name = "\u{1}_png_set_interlace_handling"]
    pub fn png_set_interlace_handling(png_ptr: png_structrp) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_set_invert_mono"]
    pub fn png_set_invert_mono(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_background"]
    pub fn png_set_background(
        png_ptr: png_structrp,
        background_color: png_const_color_16p,
        background_gamma_code: ::std::os::raw::c_int,
        need_expand: ::std::os::raw::c_int,
        background_gamma: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_background_fixed"]
    pub fn png_set_background_fixed(
        png_ptr: png_structrp,
        background_color: png_const_color_16p,
        background_gamma_code: ::std::os::raw::c_int,
        need_expand: ::std::os::raw::c_int,
        background_gamma: png_fixed_point,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_scale_16"]
    pub fn png_set_scale_16(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_strip_16"]
    pub fn png_set_strip_16(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_quantize"]
    pub fn png_set_quantize(
        png_ptr: png_structrp,
        palette: png_colorp,
        num_palette: ::std::os::raw::c_int,
        maximum_colors: ::std::os::raw::c_int,
        histogram: png_const_uint_16p,
        full_quantize: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_gamma"]
    pub fn png_set_gamma(png_ptr: png_structrp, screen_gamma: f64, override_file_gamma: f64);
}
extern "C" {
    #[link_name = "\u{1}_png_set_gamma_fixed"]
    pub fn png_set_gamma_fixed(
        png_ptr: png_structrp,
        screen_gamma: png_fixed_point,
        override_file_gamma: png_fixed_point,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_flush"]
    pub fn png_set_flush(png_ptr: png_structrp, nrows: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_png_write_flush"]
    pub fn png_write_flush(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_start_read_image"]
    pub fn png_start_read_image(png_ptr: png_structrp);
}
extern "C" {
    #[link_name = "\u{1}_png_read_update_info"]
    pub fn png_read_update_info(png_ptr: png_structrp, info_ptr: png_inforp);
}
extern "C" {
    #[link_name = "\u{1}_png_read_rows"]
    pub fn png_read_rows(
        png_ptr: png_structrp,
        row: png_bytepp,
        display_row: png_bytepp,
        num_rows: png_uint_32,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_read_row"]
    pub fn png_read_row(png_ptr: png_structrp, row: png_bytep, display_row: png_bytep);
}
extern "C" {
    #[link_name = "\u{1}_png_read_image"]
    pub fn png_read_image(png_ptr: png_structrp, image: png_bytepp);
}
extern "C" {
    #[link_name = "\u{1}_png_write_row"]
    pub fn png_write_row(png_ptr: png_structrp, row: png_const_bytep);
}
extern "C" {
    #[link_name = "\u{1}_png_write_rows"]
    pub fn png_write_rows(png_ptr: png_structrp, row: png_bytepp, num_rows: png_uint_32);
}
extern "C" {
    #[link_name = "\u{1}_png_write_image"]
    pub fn png_write_image(png_ptr: png_structrp, image: png_bytepp);
}
extern "C" {
    #[link_name = "\u{1}_png_write_end"]
    pub fn png_write_end(png_ptr: png_structrp, info_ptr: png_inforp);
}
extern "C" {
    #[link_name = "\u{1}_png_read_end"]
    pub fn png_read_end(png_ptr: png_structrp, info_ptr: png_inforp);
}
extern "C" {
    #[link_name = "\u{1}_png_destroy_info_struct"]
    pub fn png_destroy_info_struct(png_ptr: png_const_structrp, info_ptr_ptr: png_infopp);
}
extern "C" {
    #[link_name = "\u{1}_png_destroy_read_struct"]
    pub fn png_destroy_read_struct(
        png_ptr_ptr: png_structpp,
        info_ptr_ptr: png_infopp,
        end_info_ptr_ptr: png_infopp,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_destroy_write_struct"]
    pub fn png_destroy_write_struct(png_ptr_ptr: png_structpp, info_ptr_ptr: png_infopp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_crc_action"]
    pub fn png_set_crc_action(
        png_ptr: png_structrp,
        crit_action: ::std::os::raw::c_int,
        ancil_action: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_filter"]
    pub fn png_set_filter(
        png_ptr: png_structrp,
        method: ::std::os::raw::c_int,
        filters: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_filter_heuristics"]
    pub fn png_set_filter_heuristics(
        png_ptr: png_structrp,
        heuristic_method: ::std::os::raw::c_int,
        num_weights: ::std::os::raw::c_int,
        filter_weights: png_const_doublep,
        filter_costs: png_const_doublep,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_filter_heuristics_fixed"]
    pub fn png_set_filter_heuristics_fixed(
        png_ptr: png_structrp,
        heuristic_method: ::std::os::raw::c_int,
        num_weights: ::std::os::raw::c_int,
        filter_weights: png_const_fixed_point_p,
        filter_costs: png_const_fixed_point_p,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_compression_level"]
    pub fn png_set_compression_level(png_ptr: png_structrp, level: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_png_set_compression_mem_level"]
    pub fn png_set_compression_mem_level(png_ptr: png_structrp, mem_level: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_png_set_compression_strategy"]
    pub fn png_set_compression_strategy(png_ptr: png_structrp, strategy: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_png_set_compression_window_bits"]
    pub fn png_set_compression_window_bits(
        png_ptr: png_structrp,
        window_bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_compression_method"]
    pub fn png_set_compression_method(png_ptr: png_structrp, method: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_png_set_text_compression_level"]
    pub fn png_set_text_compression_level(png_ptr: png_structrp, level: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_png_set_text_compression_mem_level"]
    pub fn png_set_text_compression_mem_level(
        png_ptr: png_structrp,
        mem_level: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_text_compression_strategy"]
    pub fn png_set_text_compression_strategy(
        png_ptr: png_structrp,
        strategy: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_text_compression_window_bits"]
    pub fn png_set_text_compression_window_bits(
        png_ptr: png_structrp,
        window_bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_text_compression_method"]
    pub fn png_set_text_compression_method(png_ptr: png_structrp, method: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_png_init_io"]
    pub fn png_init_io(png_ptr: png_structrp, fp: png_FILE_p);
}
extern "C" {
    #[link_name = "\u{1}_png_set_error_fn"]
    pub fn png_set_error_fn(
        png_ptr: png_structrp,
        error_ptr: png_voidp,
        error_fn: png_error_ptr,
        warning_fn: png_error_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_error_ptr"]
    pub fn png_get_error_ptr(png_ptr: png_const_structrp) -> png_voidp;
}
extern "C" {
    #[link_name = "\u{1}_png_set_write_fn"]
    pub fn png_set_write_fn(
        png_ptr: png_structrp,
        io_ptr: png_voidp,
        write_data_fn: png_rw_ptr,
        output_flush_fn: png_flush_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_read_fn"]
    pub fn png_set_read_fn(png_ptr: png_structrp, io_ptr: png_voidp, read_data_fn: png_rw_ptr);
}
extern "C" {
    #[link_name = "\u{1}_png_get_io_ptr"]
    pub fn png_get_io_ptr(png_ptr: png_const_structrp) -> png_voidp;
}
extern "C" {
    #[link_name = "\u{1}_png_set_read_status_fn"]
    pub fn png_set_read_status_fn(png_ptr: png_structrp, read_row_fn: png_read_status_ptr);
}
extern "C" {
    #[link_name = "\u{1}_png_set_write_status_fn"]
    pub fn png_set_write_status_fn(png_ptr: png_structrp, write_row_fn: png_write_status_ptr);
}
extern "C" {
    #[link_name = "\u{1}_png_set_mem_fn"]
    pub fn png_set_mem_fn(
        png_ptr: png_structrp,
        mem_ptr: png_voidp,
        malloc_fn: png_malloc_ptr,
        free_fn: png_free_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_mem_ptr"]
    pub fn png_get_mem_ptr(png_ptr: png_const_structrp) -> png_voidp;
}
extern "C" {
    #[link_name = "\u{1}_png_set_read_user_transform_fn"]
    pub fn png_set_read_user_transform_fn(
        png_ptr: png_structrp,
        read_user_transform_fn: png_user_transform_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_write_user_transform_fn"]
    pub fn png_set_write_user_transform_fn(
        png_ptr: png_structrp,
        write_user_transform_fn: png_user_transform_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_user_transform_info"]
    pub fn png_set_user_transform_info(
        png_ptr: png_structrp,
        user_transform_ptr: png_voidp,
        user_transform_depth: ::std::os::raw::c_int,
        user_transform_channels: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_user_transform_ptr"]
    pub fn png_get_user_transform_ptr(png_ptr: png_const_structrp) -> png_voidp;
}
extern "C" {
    #[link_name = "\u{1}_png_get_current_row_number"]
    pub fn png_get_current_row_number(arg1: png_const_structrp) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_current_pass_number"]
    pub fn png_get_current_pass_number(arg1: png_const_structrp) -> png_byte;
}
extern "C" {
    #[link_name = "\u{1}_png_set_read_user_chunk_fn"]
    pub fn png_set_read_user_chunk_fn(
        png_ptr: png_structrp,
        user_chunk_ptr: png_voidp,
        read_user_chunk_fn: png_user_chunk_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_user_chunk_ptr"]
    pub fn png_get_user_chunk_ptr(png_ptr: png_const_structrp) -> png_voidp;
}
extern "C" {
    #[link_name = "\u{1}_png_set_progressive_read_fn"]
    pub fn png_set_progressive_read_fn(
        png_ptr: png_structrp,
        progressive_ptr: png_voidp,
        info_fn: png_progressive_info_ptr,
        row_fn: png_progressive_row_ptr,
        end_fn: png_progressive_end_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_progressive_ptr"]
    pub fn png_get_progressive_ptr(png_ptr: png_const_structrp) -> png_voidp;
}
extern "C" {
    #[link_name = "\u{1}_png_process_data"]
    pub fn png_process_data(
        png_ptr: png_structrp,
        info_ptr: png_inforp,
        buffer: png_bytep,
        buffer_size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_process_data_pause"]
    pub fn png_process_data_pause(arg1: png_structrp, save: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_png_process_data_skip"]
    pub fn png_process_data_skip(arg1: png_structrp) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_progressive_combine_row"]
    pub fn png_progressive_combine_row(
        png_ptr: png_const_structrp,
        old_row: png_bytep,
        new_row: png_const_bytep,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_malloc"]
    pub fn png_malloc(png_ptr: png_const_structrp, size: png_alloc_size_t) -> png_voidp;
}
extern "C" {
    #[link_name = "\u{1}_png_calloc"]
    pub fn png_calloc(png_ptr: png_const_structrp, size: png_alloc_size_t) -> png_voidp;
}
extern "C" {
    #[link_name = "\u{1}_png_malloc_warn"]
    pub fn png_malloc_warn(png_ptr: png_const_structrp, size: png_alloc_size_t) -> png_voidp;
}
extern "C" {
    #[link_name = "\u{1}_png_free"]
    pub fn png_free(png_ptr: png_const_structrp, ptr: png_voidp);
}
extern "C" {
    #[link_name = "\u{1}_png_free_data"]
    pub fn png_free_data(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        free_me: png_uint_32,
        num: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_data_freer"]
    pub fn png_data_freer(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        freer: ::std::os::raw::c_int,
        mask: png_uint_32,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_malloc_default"]
    pub fn png_malloc_default(png_ptr: png_const_structrp, size: png_alloc_size_t) -> png_voidp;
}
extern "C" {
    #[link_name = "\u{1}_png_free_default"]
    pub fn png_free_default(png_ptr: png_const_structrp, ptr: png_voidp);
}
extern "C" {
    #[link_name = "\u{1}_png_error"]
    pub fn png_error(png_ptr: png_const_structrp, error_message: png_const_charp);
}
extern "C" {
    #[link_name = "\u{1}_png_chunk_error"]
    pub fn png_chunk_error(png_ptr: png_const_structrp, error_message: png_const_charp);
}
extern "C" {
    #[link_name = "\u{1}_png_warning"]
    pub fn png_warning(png_ptr: png_const_structrp, warning_message: png_const_charp);
}
extern "C" {
    #[link_name = "\u{1}_png_chunk_warning"]
    pub fn png_chunk_warning(png_ptr: png_const_structrp, warning_message: png_const_charp);
}
extern "C" {
    #[link_name = "\u{1}_png_benign_error"]
    pub fn png_benign_error(png_ptr: png_const_structrp, warning_message: png_const_charp);
}
extern "C" {
    #[link_name = "\u{1}_png_chunk_benign_error"]
    pub fn png_chunk_benign_error(png_ptr: png_const_structrp, warning_message: png_const_charp);
}
extern "C" {
    #[link_name = "\u{1}_png_set_benign_errors"]
    pub fn png_set_benign_errors(png_ptr: png_structrp, allowed: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_png_get_valid"]
    pub fn png_get_valid(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        flag: png_uint_32,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_rowbytes"]
    pub fn png_get_rowbytes(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_png_get_rows"]
    pub fn png_get_rows(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> png_bytepp;
}
extern "C" {
    #[link_name = "\u{1}_png_set_rows"]
    pub fn png_set_rows(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        row_pointers: png_bytepp,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_channels"]
    pub fn png_get_channels(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> png_byte;
}
extern "C" {
    #[link_name = "\u{1}_png_get_image_width"]
    pub fn png_get_image_width(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_image_height"]
    pub fn png_get_image_height(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_bit_depth"]
    pub fn png_get_bit_depth(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> png_byte;
}
extern "C" {
    #[link_name = "\u{1}_png_get_color_type"]
    pub fn png_get_color_type(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> png_byte;
}
extern "C" {
    #[link_name = "\u{1}_png_get_filter_type"]
    pub fn png_get_filter_type(png_ptr: png_const_structrp, info_ptr: png_const_inforp)
        -> png_byte;
}
extern "C" {
    #[link_name = "\u{1}_png_get_interlace_type"]
    pub fn png_get_interlace_type(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_byte;
}
extern "C" {
    #[link_name = "\u{1}_png_get_compression_type"]
    pub fn png_get_compression_type(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_byte;
}
extern "C" {
    #[link_name = "\u{1}_png_get_pixels_per_meter"]
    pub fn png_get_pixels_per_meter(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_x_pixels_per_meter"]
    pub fn png_get_x_pixels_per_meter(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_y_pixels_per_meter"]
    pub fn png_get_y_pixels_per_meter(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_pixel_aspect_ratio"]
    pub fn png_get_pixel_aspect_ratio(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_pixel_aspect_ratio_fixed"]
    pub fn png_get_pixel_aspect_ratio_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_fixed_point;
}
extern "C" {
    #[link_name = "\u{1}_png_get_x_offset_pixels"]
    pub fn png_get_x_offset_pixels(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_int_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_y_offset_pixels"]
    pub fn png_get_y_offset_pixels(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_int_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_x_offset_microns"]
    pub fn png_get_x_offset_microns(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_int_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_y_offset_microns"]
    pub fn png_get_y_offset_microns(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_int_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_signature"]
    pub fn png_get_signature(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_const_bytep;
}
extern "C" {
    #[link_name = "\u{1}_png_get_bKGD"]
    pub fn png_get_bKGD(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        background: *mut png_color_16p,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_bKGD"]
    pub fn png_set_bKGD(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        background: png_const_color_16p,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_cHRM"]
    pub fn png_get_cHRM(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        white_x: *mut f64,
        white_y: *mut f64,
        red_x: *mut f64,
        red_y: *mut f64,
        green_x: *mut f64,
        green_y: *mut f64,
        blue_x: *mut f64,
        blue_y: *mut f64,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_cHRM_XYZ"]
    pub fn png_get_cHRM_XYZ(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        red_X: *mut f64,
        red_Y: *mut f64,
        red_Z: *mut f64,
        green_X: *mut f64,
        green_Y: *mut f64,
        green_Z: *mut f64,
        blue_X: *mut f64,
        blue_Y: *mut f64,
        blue_Z: *mut f64,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_cHRM_fixed"]
    pub fn png_get_cHRM_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        int_white_x: *mut png_fixed_point,
        int_white_y: *mut png_fixed_point,
        int_red_x: *mut png_fixed_point,
        int_red_y: *mut png_fixed_point,
        int_green_x: *mut png_fixed_point,
        int_green_y: *mut png_fixed_point,
        int_blue_x: *mut png_fixed_point,
        int_blue_y: *mut png_fixed_point,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_cHRM_XYZ_fixed"]
    pub fn png_get_cHRM_XYZ_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        int_red_X: *mut png_fixed_point,
        int_red_Y: *mut png_fixed_point,
        int_red_Z: *mut png_fixed_point,
        int_green_X: *mut png_fixed_point,
        int_green_Y: *mut png_fixed_point,
        int_green_Z: *mut png_fixed_point,
        int_blue_X: *mut png_fixed_point,
        int_blue_Y: *mut png_fixed_point,
        int_blue_Z: *mut png_fixed_point,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_cHRM"]
    pub fn png_set_cHRM(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        white_x: f64,
        white_y: f64,
        red_x: f64,
        red_y: f64,
        green_x: f64,
        green_y: f64,
        blue_x: f64,
        blue_y: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_cHRM_XYZ"]
    pub fn png_set_cHRM_XYZ(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        red_X: f64,
        red_Y: f64,
        red_Z: f64,
        green_X: f64,
        green_Y: f64,
        green_Z: f64,
        blue_X: f64,
        blue_Y: f64,
        blue_Z: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_cHRM_fixed"]
    pub fn png_set_cHRM_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        int_white_x: png_fixed_point,
        int_white_y: png_fixed_point,
        int_red_x: png_fixed_point,
        int_red_y: png_fixed_point,
        int_green_x: png_fixed_point,
        int_green_y: png_fixed_point,
        int_blue_x: png_fixed_point,
        int_blue_y: png_fixed_point,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_cHRM_XYZ_fixed"]
    pub fn png_set_cHRM_XYZ_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        int_red_X: png_fixed_point,
        int_red_Y: png_fixed_point,
        int_red_Z: png_fixed_point,
        int_green_X: png_fixed_point,
        int_green_Y: png_fixed_point,
        int_green_Z: png_fixed_point,
        int_blue_X: png_fixed_point,
        int_blue_Y: png_fixed_point,
        int_blue_Z: png_fixed_point,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_eXIf"]
    pub fn png_get_eXIf(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        exif: *mut png_bytep,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_eXIf"]
    pub fn png_set_eXIf(png_ptr: png_const_structrp, info_ptr: png_inforp, exif: png_bytep);
}
extern "C" {
    #[link_name = "\u{1}_png_get_eXIf_1"]
    pub fn png_get_eXIf_1(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        num_exif: *mut png_uint_32,
        exif: *mut png_bytep,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_eXIf_1"]
    pub fn png_set_eXIf_1(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        num_exif: png_uint_32,
        exif: png_bytep,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_gAMA"]
    pub fn png_get_gAMA(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        file_gamma: *mut f64,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_gAMA_fixed"]
    pub fn png_get_gAMA_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        int_file_gamma: *mut png_fixed_point,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_gAMA"]
    pub fn png_set_gAMA(png_ptr: png_const_structrp, info_ptr: png_inforp, file_gamma: f64);
}
extern "C" {
    #[link_name = "\u{1}_png_set_gAMA_fixed"]
    pub fn png_set_gAMA_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        int_file_gamma: png_fixed_point,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_hIST"]
    pub fn png_get_hIST(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        hist: *mut png_uint_16p,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_hIST"]
    pub fn png_set_hIST(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        hist: png_const_uint_16p,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_IHDR"]
    pub fn png_get_IHDR(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        width: *mut png_uint_32,
        height: *mut png_uint_32,
        bit_depth: *mut ::std::os::raw::c_int,
        color_type: *mut ::std::os::raw::c_int,
        interlace_method: *mut ::std::os::raw::c_int,
        compression_method: *mut ::std::os::raw::c_int,
        filter_method: *mut ::std::os::raw::c_int,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_IHDR"]
    pub fn png_set_IHDR(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        width: png_uint_32,
        height: png_uint_32,
        bit_depth: ::std::os::raw::c_int,
        color_type: ::std::os::raw::c_int,
        interlace_method: ::std::os::raw::c_int,
        compression_method: ::std::os::raw::c_int,
        filter_method: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_oFFs"]
    pub fn png_get_oFFs(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        offset_x: *mut png_int_32,
        offset_y: *mut png_int_32,
        unit_type: *mut ::std::os::raw::c_int,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_oFFs"]
    pub fn png_set_oFFs(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        offset_x: png_int_32,
        offset_y: png_int_32,
        unit_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_pCAL"]
    pub fn png_get_pCAL(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        purpose: *mut png_charp,
        X0: *mut png_int_32,
        X1: *mut png_int_32,
        type_: *mut ::std::os::raw::c_int,
        nparams: *mut ::std::os::raw::c_int,
        units: *mut png_charp,
        params: *mut png_charpp,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_pCAL"]
    pub fn png_set_pCAL(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        purpose: png_const_charp,
        X0: png_int_32,
        X1: png_int_32,
        type_: ::std::os::raw::c_int,
        nparams: ::std::os::raw::c_int,
        units: png_const_charp,
        params: png_charpp,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_pHYs"]
    pub fn png_get_pHYs(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        res_x: *mut png_uint_32,
        res_y: *mut png_uint_32,
        unit_type: *mut ::std::os::raw::c_int,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_pHYs"]
    pub fn png_set_pHYs(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        res_x: png_uint_32,
        res_y: png_uint_32,
        unit_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_PLTE"]
    pub fn png_get_PLTE(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        palette: *mut png_colorp,
        num_palette: *mut ::std::os::raw::c_int,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_PLTE"]
    pub fn png_set_PLTE(
        png_ptr: png_structrp,
        info_ptr: png_inforp,
        palette: png_const_colorp,
        num_palette: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_sBIT"]
    pub fn png_get_sBIT(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        sig_bit: *mut png_color_8p,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_sBIT"]
    pub fn png_set_sBIT(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        sig_bit: png_const_color_8p,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_sRGB"]
    pub fn png_get_sRGB(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        file_srgb_intent: *mut ::std::os::raw::c_int,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_sRGB"]
    pub fn png_set_sRGB(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        srgb_intent: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_sRGB_gAMA_and_cHRM"]
    pub fn png_set_sRGB_gAMA_and_cHRM(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        srgb_intent: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_iCCP"]
    pub fn png_get_iCCP(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        name: png_charpp,
        compression_type: *mut ::std::os::raw::c_int,
        profile: png_bytepp,
        proflen: *mut png_uint_32,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_iCCP"]
    pub fn png_set_iCCP(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        name: png_const_charp,
        compression_type: ::std::os::raw::c_int,
        profile: png_const_bytep,
        proflen: png_uint_32,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_sPLT"]
    pub fn png_get_sPLT(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        entries: png_sPLT_tpp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_set_sPLT"]
    pub fn png_set_sPLT(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        entries: png_const_sPLT_tp,
        nentries: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_text"]
    pub fn png_get_text(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        text_ptr: *mut png_textp,
        num_text: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_set_text"]
    pub fn png_set_text(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        text_ptr: png_const_textp,
        num_text: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_tIME"]
    pub fn png_get_tIME(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        mod_time: *mut png_timep,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_tIME"]
    pub fn png_set_tIME(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        mod_time: png_const_timep,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_tRNS"]
    pub fn png_get_tRNS(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        trans_alpha: *mut png_bytep,
        num_trans: *mut ::std::os::raw::c_int,
        trans_color: *mut png_color_16p,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_tRNS"]
    pub fn png_set_tRNS(
        png_ptr: png_structrp,
        info_ptr: png_inforp,
        trans_alpha: png_const_bytep,
        num_trans: ::std::os::raw::c_int,
        trans_color: png_const_color_16p,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_sCAL"]
    pub fn png_get_sCAL(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        unit: *mut ::std::os::raw::c_int,
        width: *mut f64,
        height: *mut f64,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_sCAL_fixed"]
    pub fn png_get_sCAL_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        unit: *mut ::std::os::raw::c_int,
        width: *mut png_fixed_point,
        height: *mut png_fixed_point,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_sCAL_s"]
    pub fn png_get_sCAL_s(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        unit: *mut ::std::os::raw::c_int,
        swidth: png_charpp,
        sheight: png_charpp,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_sCAL"]
    pub fn png_set_sCAL(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        unit: ::std::os::raw::c_int,
        width: f64,
        height: f64,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_sCAL_fixed"]
    pub fn png_set_sCAL_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        unit: ::std::os::raw::c_int,
        width: png_fixed_point,
        height: png_fixed_point,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_sCAL_s"]
    pub fn png_set_sCAL_s(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        unit: ::std::os::raw::c_int,
        swidth: png_const_charp,
        sheight: png_const_charp,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_keep_unknown_chunks"]
    pub fn png_set_keep_unknown_chunks(
        png_ptr: png_structrp,
        keep: ::std::os::raw::c_int,
        chunk_list: png_const_bytep,
        num_chunks: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_handle_as_unknown"]
    pub fn png_handle_as_unknown(
        png_ptr: png_const_structrp,
        chunk_name: png_const_bytep,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_set_unknown_chunks"]
    pub fn png_set_unknown_chunks(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        unknowns: png_const_unknown_chunkp,
        num_unknowns: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_set_unknown_chunk_location"]
    pub fn png_set_unknown_chunk_location(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        chunk: ::std::os::raw::c_int,
        location: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_unknown_chunks"]
    pub fn png_get_unknown_chunks(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        entries: png_unknown_chunkpp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_set_invalid"]
    pub fn png_set_invalid(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        mask: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_read_png"]
    pub fn png_read_png(
        png_ptr: png_structrp,
        info_ptr: png_inforp,
        transforms: ::std::os::raw::c_int,
        params: png_voidp,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_write_png"]
    pub fn png_write_png(
        png_ptr: png_structrp,
        info_ptr: png_inforp,
        transforms: ::std::os::raw::c_int,
        params: png_voidp,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_copyright"]
    pub fn png_get_copyright(png_ptr: png_const_structrp) -> png_const_charp;
}
extern "C" {
    #[link_name = "\u{1}_png_get_header_ver"]
    pub fn png_get_header_ver(png_ptr: png_const_structrp) -> png_const_charp;
}
extern "C" {
    #[link_name = "\u{1}_png_get_header_version"]
    pub fn png_get_header_version(png_ptr: png_const_structrp) -> png_const_charp;
}
extern "C" {
    #[link_name = "\u{1}_png_get_libpng_ver"]
    pub fn png_get_libpng_ver(png_ptr: png_const_structrp) -> png_const_charp;
}
extern "C" {
    #[link_name = "\u{1}_png_permit_mng_features"]
    pub fn png_permit_mng_features(
        png_ptr: png_structrp,
        mng_features_permitted: png_uint_32,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_user_limits"]
    pub fn png_set_user_limits(
        png_ptr: png_structrp,
        user_width_max: png_uint_32,
        user_height_max: png_uint_32,
    );
}
extern "C" {
    #[link_name = "\u{1}_png_get_user_width_max"]
    pub fn png_get_user_width_max(png_ptr: png_const_structrp) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_user_height_max"]
    pub fn png_get_user_height_max(png_ptr: png_const_structrp) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_chunk_cache_max"]
    pub fn png_set_chunk_cache_max(png_ptr: png_structrp, user_chunk_cache_max: png_uint_32);
}
extern "C" {
    #[link_name = "\u{1}_png_get_chunk_cache_max"]
    pub fn png_get_chunk_cache_max(png_ptr: png_const_structrp) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_set_chunk_malloc_max"]
    pub fn png_set_chunk_malloc_max(png_ptr: png_structrp, user_chunk_cache_max: png_alloc_size_t);
}
extern "C" {
    #[link_name = "\u{1}_png_get_chunk_malloc_max"]
    pub fn png_get_chunk_malloc_max(png_ptr: png_const_structrp) -> png_alloc_size_t;
}
extern "C" {
    #[link_name = "\u{1}_png_get_pixels_per_inch"]
    pub fn png_get_pixels_per_inch(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_x_pixels_per_inch"]
    pub fn png_get_x_pixels_per_inch(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_y_pixels_per_inch"]
    pub fn png_get_y_pixels_per_inch(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_x_offset_inches"]
    pub fn png_get_x_offset_inches(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_x_offset_inches_fixed"]
    pub fn png_get_x_offset_inches_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_fixed_point;
}
extern "C" {
    #[link_name = "\u{1}_png_get_y_offset_inches"]
    pub fn png_get_y_offset_inches(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_y_offset_inches_fixed"]
    pub fn png_get_y_offset_inches_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_fixed_point;
}
extern "C" {
    #[link_name = "\u{1}_png_get_pHYs_dpi"]
    pub fn png_get_pHYs_dpi(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        res_x: *mut png_uint_32,
        res_y: *mut png_uint_32,
        unit_type: *mut ::std::os::raw::c_int,
    ) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_io_state"]
    pub fn png_get_io_state(png_ptr: png_const_structrp) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_io_chunk_type"]
    pub fn png_get_io_chunk_type(png_ptr: png_const_structrp) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_uint_32"]
    pub fn png_get_uint_32(buf: png_const_bytep) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_uint_16"]
    pub fn png_get_uint_16(buf: png_const_bytep) -> png_uint_16;
}
extern "C" {
    #[link_name = "\u{1}_png_get_int_32"]
    pub fn png_get_int_32(buf: png_const_bytep) -> png_int_32;
}
extern "C" {
    #[link_name = "\u{1}_png_get_uint_31"]
    pub fn png_get_uint_31(png_ptr: png_const_structrp, buf: png_const_bytep) -> png_uint_32;
}
extern "C" {
    #[link_name = "\u{1}_png_save_uint_32"]
    pub fn png_save_uint_32(buf: png_bytep, i: png_uint_32);
}
extern "C" {
    #[link_name = "\u{1}_png_save_int_32"]
    pub fn png_save_int_32(buf: png_bytep, i: png_int_32);
}
extern "C" {
    #[link_name = "\u{1}_png_save_uint_16"]
    pub fn png_save_uint_16(buf: png_bytep, i: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_png_set_check_for_invalid_index"]
    pub fn png_set_check_for_invalid_index(png_ptr: png_structrp, allowed: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_png_get_palette_max"]
    pub fn png_get_palette_max(
        png_ptr: png_const_structp,
        info_ptr: png_const_infop,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct png_control {
    _unused: [u8; 0],
}
pub type png_controlp = *mut png_control;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct png_image {
    pub opaque: png_controlp,
    pub version: png_uint_32,
    pub width: png_uint_32,
    pub height: png_uint_32,
    pub format: png_uint_32,
    pub flags: png_uint_32,
    pub colormap_entries: png_uint_32,
    pub warning_or_error: png_uint_32,
    pub message: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_png_image() {
    assert_eq!(
        ::std::mem::size_of::<png_image>(),
        104usize,
        concat!("Size of: ", stringify!(png_image))
    );
    assert_eq!(
        ::std::mem::align_of::<png_image>(),
        8usize,
        concat!("Alignment of ", stringify!(png_image))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).opaque as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).height as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).format as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).colormap_entries as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(colormap_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).warning_or_error as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(warning_or_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).message as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(message)
        )
    );
}
impl Default for png_image {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type png_imagep = *mut png_image;
extern "C" {
    #[link_name = "\u{1}_png_image_begin_read_from_file"]
    pub fn png_image_begin_read_from_file(
        image: png_imagep,
        file_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_image_begin_read_from_stdio"]
    pub fn png_image_begin_read_from_stdio(
        image: png_imagep,
        file: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_image_begin_read_from_memory"]
    pub fn png_image_begin_read_from_memory(
        image: png_imagep,
        memory: png_const_voidp,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_image_finish_read"]
    pub fn png_image_finish_read(
        image: png_imagep,
        background: png_const_colorp,
        buffer: *mut ::std::os::raw::c_void,
        row_stride: png_int_32,
        colormap: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_image_free"]
    pub fn png_image_free(image: png_imagep);
}
extern "C" {
    #[link_name = "\u{1}_png_image_write_to_file"]
    pub fn png_image_write_to_file(
        image: png_imagep,
        file: *const ::std::os::raw::c_char,
        convert_to_8bit: ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_void,
        row_stride: png_int_32,
        colormap: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_image_write_to_stdio"]
    pub fn png_image_write_to_stdio(
        image: png_imagep,
        file: *mut FILE,
        convert_to_8_bit: ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_void,
        row_stride: png_int_32,
        colormap: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_image_write_to_memory"]
    pub fn png_image_write_to_memory(
        image: png_imagep,
        memory: *mut ::std::os::raw::c_void,
        memory_bytes: *mut png_alloc_size_t,
        convert_to_8_bit: ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_void,
        row_stride: png_int_32,
        colormap: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_png_set_option"]
    pub fn png_set_option(
        png_ptr: png_structrp,
        option: ::std::os::raw::c_int,
        onoff: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
