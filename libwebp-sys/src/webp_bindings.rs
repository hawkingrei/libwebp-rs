/* automatically generated by rust-bindgen */

pub type wchar_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
impl Default for __pthread_internal_list {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
impl Default for __pthread_mutex_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
impl Default for __pthread_cond_s__bindgen_ty_2 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
impl Default for __pthread_cond_s {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutexattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_condattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_attr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_mutex_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_cond_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlock_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_rwlockattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrier_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
impl Default for pthread_barrierattr_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
impl Default for random_data {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
impl Default for __locale_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Default, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub const WebPFeatureFlags_ANIMATION_FLAG: WebPFeatureFlags = 2;
pub const WebPFeatureFlags_XMP_FLAG: WebPFeatureFlags = 4;
pub const WebPFeatureFlags_EXIF_FLAG: WebPFeatureFlags = 8;
pub const WebPFeatureFlags_ALPHA_FLAG: WebPFeatureFlags = 16;
pub const WebPFeatureFlags_ICCP_FLAG: WebPFeatureFlags = 32;
pub const WebPFeatureFlags_ALL_VALID_FLAGS: WebPFeatureFlags = 62;
pub type WebPFeatureFlags = u32;
pub const WebPMuxAnimDispose_WEBP_MUX_DISPOSE_NONE: WebPMuxAnimDispose = 0;
pub const WebPMuxAnimDispose_WEBP_MUX_DISPOSE_BACKGROUND: WebPMuxAnimDispose = 1;
pub type WebPMuxAnimDispose = u32;
pub const WebPMuxAnimBlend_WEBP_MUX_BLEND: WebPMuxAnimBlend = 0;
pub const WebPMuxAnimBlend_WEBP_MUX_NO_BLEND: WebPMuxAnimBlend = 1;
pub type WebPMuxAnimBlend = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WebPData {
    pub bytes: *const u8,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_WebPData() {
    assert_eq!(
        ::std::mem::size_of::<WebPData>(),
        16usize,
        concat!("Size of: ", stringify!(WebPData))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPData>(),
        8usize,
        concat!("Alignment of ", stringify!(WebPData))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPData>())).bytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPData),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPData>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPData),
            "::",
            stringify!(size)
        )
    );
}
impl Default for WebPData {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WebPMux {
    _unused: [u8; 0],
}
pub const WebPMuxError_WEBP_MUX_OK: WebPMuxError = 1;
pub const WebPMuxError_WEBP_MUX_NOT_FOUND: WebPMuxError = 0;
pub const WebPMuxError_WEBP_MUX_INVALID_ARGUMENT: WebPMuxError = -1;
pub const WebPMuxError_WEBP_MUX_BAD_DATA: WebPMuxError = -2;
pub const WebPMuxError_WEBP_MUX_MEMORY_ERROR: WebPMuxError = -3;
pub const WebPMuxError_WEBP_MUX_NOT_ENOUGH_DATA: WebPMuxError = -4;
pub type WebPMuxError = i32;
pub const WebPChunkId_WEBP_CHUNK_VP8X: WebPChunkId = 0;
pub const WebPChunkId_WEBP_CHUNK_ICCP: WebPChunkId = 1;
pub const WebPChunkId_WEBP_CHUNK_ANIM: WebPChunkId = 2;
pub const WebPChunkId_WEBP_CHUNK_ANMF: WebPChunkId = 3;
pub const WebPChunkId_WEBP_CHUNK_DEPRECATED: WebPChunkId = 4;
pub const WebPChunkId_WEBP_CHUNK_ALPHA: WebPChunkId = 5;
pub const WebPChunkId_WEBP_CHUNK_IMAGE: WebPChunkId = 6;
pub const WebPChunkId_WEBP_CHUNK_EXIF: WebPChunkId = 7;
pub const WebPChunkId_WEBP_CHUNK_XMP: WebPChunkId = 8;
pub const WebPChunkId_WEBP_CHUNK_UNKNOWN: WebPChunkId = 9;
pub const WebPChunkId_WEBP_CHUNK_NIL: WebPChunkId = 10;
pub type WebPChunkId = u32;
extern "C" {
    pub fn WebPGetMuxVersion() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPNewInternal(arg1: ::std::os::raw::c_int) -> *mut WebPMux;
}
extern "C" {
    pub fn WebPMuxDelete(mux: *mut WebPMux);
}
extern "C" {
    pub fn WebPMuxCreateInternal(
        arg1: *const WebPData,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut WebPMux;
}
extern "C" {
    pub fn WebPMuxSetChunk(
        mux: *mut WebPMux,
        fourcc: *const ::std::os::raw::c_char,
        chunk_data: *const WebPData,
        copy_data: ::std::os::raw::c_int,
    ) -> WebPMuxError;
}
extern "C" {
    pub fn WebPMuxGetChunk(
        mux: *const WebPMux,
        fourcc: *const ::std::os::raw::c_char,
        chunk_data: *mut WebPData,
    ) -> WebPMuxError;
}
extern "C" {
    pub fn WebPMuxDeleteChunk(
        mux: *mut WebPMux,
        fourcc: *const ::std::os::raw::c_char,
    ) -> WebPMuxError;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WebPMuxFrameInfo {
    pub bitstream: WebPData,
    pub x_offset: ::std::os::raw::c_int,
    pub y_offset: ::std::os::raw::c_int,
    pub duration: ::std::os::raw::c_int,
    pub id: WebPChunkId,
    pub dispose_method: WebPMuxAnimDispose,
    pub blend_method: WebPMuxAnimBlend,
    pub pad: [u32; 1usize],
}
#[test]
fn bindgen_test_layout_WebPMuxFrameInfo() {
    assert_eq!(
        ::std::mem::size_of::<WebPMuxFrameInfo>(),
        48usize,
        concat!("Size of: ", stringify!(WebPMuxFrameInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPMuxFrameInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(WebPMuxFrameInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMuxFrameInfo>())).bitstream as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMuxFrameInfo),
            "::",
            stringify!(bitstream)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMuxFrameInfo>())).x_offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMuxFrameInfo),
            "::",
            stringify!(x_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMuxFrameInfo>())).y_offset as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMuxFrameInfo),
            "::",
            stringify!(y_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMuxFrameInfo>())).duration as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMuxFrameInfo),
            "::",
            stringify!(duration)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMuxFrameInfo>())).id as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMuxFrameInfo),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMuxFrameInfo>())).dispose_method as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMuxFrameInfo),
            "::",
            stringify!(dispose_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMuxFrameInfo>())).blend_method as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMuxFrameInfo),
            "::",
            stringify!(blend_method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMuxFrameInfo>())).pad as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMuxFrameInfo),
            "::",
            stringify!(pad)
        )
    );
}
impl Default for WebPMuxFrameInfo {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn WebPMuxSetImage(
        mux: *mut WebPMux,
        bitstream: *const WebPData,
        copy_data: ::std::os::raw::c_int,
    ) -> WebPMuxError;
}
extern "C" {
    pub fn WebPMuxPushFrame(
        mux: *mut WebPMux,
        frame: *const WebPMuxFrameInfo,
        copy_data: ::std::os::raw::c_int,
    ) -> WebPMuxError;
}
extern "C" {
    pub fn WebPMuxGetFrame(
        mux: *const WebPMux,
        nth: u32,
        frame: *mut WebPMuxFrameInfo,
    ) -> WebPMuxError;
}
extern "C" {
    pub fn WebPMuxDeleteFrame(mux: *mut WebPMux, nth: u32) -> WebPMuxError;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WebPMuxAnimParams {
    pub bgcolor: u32,
    pub loop_count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_WebPMuxAnimParams() {
    assert_eq!(
        ::std::mem::size_of::<WebPMuxAnimParams>(),
        8usize,
        concat!("Size of: ", stringify!(WebPMuxAnimParams))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPMuxAnimParams>(),
        4usize,
        concat!("Alignment of ", stringify!(WebPMuxAnimParams))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMuxAnimParams>())).bgcolor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMuxAnimParams),
            "::",
            stringify!(bgcolor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMuxAnimParams>())).loop_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMuxAnimParams),
            "::",
            stringify!(loop_count)
        )
    );
}
extern "C" {
    pub fn WebPMuxSetAnimationParams(
        mux: *mut WebPMux,
        params: *const WebPMuxAnimParams,
    ) -> WebPMuxError;
}
extern "C" {
    pub fn WebPMuxGetAnimationParams(
        mux: *const WebPMux,
        params: *mut WebPMuxAnimParams,
    ) -> WebPMuxError;
}
extern "C" {
    pub fn WebPMuxSetCanvasSize(
        mux: *mut WebPMux,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> WebPMuxError;
}
extern "C" {
    pub fn WebPMuxGetCanvasSize(
        mux: *const WebPMux,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    ) -> WebPMuxError;
}
extern "C" {
    pub fn WebPMuxGetFeatures(mux: *const WebPMux, flags: *mut u32) -> WebPMuxError;
}
extern "C" {
    pub fn WebPMuxNumChunks(
        mux: *const WebPMux,
        id: WebPChunkId,
        num_elements: *mut ::std::os::raw::c_int,
    ) -> WebPMuxError;
}
extern "C" {
    pub fn WebPMuxAssemble(mux: *mut WebPMux, assembled_data: *mut WebPData) -> WebPMuxError;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WebPAnimEncoder {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WebPAnimEncoderOptions {
    pub anim_params: WebPMuxAnimParams,
    pub minimize_size: ::std::os::raw::c_int,
    pub kmin: ::std::os::raw::c_int,
    pub kmax: ::std::os::raw::c_int,
    pub allow_mixed: ::std::os::raw::c_int,
    pub verbose: ::std::os::raw::c_int,
    pub padding: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_WebPAnimEncoderOptions() {
    assert_eq!(
        ::std::mem::size_of::<WebPAnimEncoderOptions>(),
        44usize,
        concat!("Size of: ", stringify!(WebPAnimEncoderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPAnimEncoderOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(WebPAnimEncoderOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WebPAnimEncoderOptions>())).anim_params as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAnimEncoderOptions),
            "::",
            stringify!(anim_params)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WebPAnimEncoderOptions>())).minimize_size as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAnimEncoderOptions),
            "::",
            stringify!(minimize_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAnimEncoderOptions>())).kmin as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAnimEncoderOptions),
            "::",
            stringify!(kmin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAnimEncoderOptions>())).kmax as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAnimEncoderOptions),
            "::",
            stringify!(kmax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WebPAnimEncoderOptions>())).allow_mixed as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAnimEncoderOptions),
            "::",
            stringify!(allow_mixed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAnimEncoderOptions>())).verbose as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAnimEncoderOptions),
            "::",
            stringify!(verbose)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAnimEncoderOptions>())).padding as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAnimEncoderOptions),
            "::",
            stringify!(padding)
        )
    );
}
extern "C" {
    pub fn WebPAnimEncoderOptionsInitInternal(
        arg1: *mut WebPAnimEncoderOptions,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPAnimEncoderNewInternal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *const WebPAnimEncoderOptions,
        arg4: ::std::os::raw::c_int,
    ) -> *mut WebPAnimEncoder;
}
extern "C" {
    pub fn WebPAnimEncoderAdd(
        enc: *mut WebPAnimEncoder,
        frame: *mut WebPPicture,
        timestamp_ms: ::std::os::raw::c_int,
        config: *const WebPConfig,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPAnimEncoderAssemble(
        enc: *mut WebPAnimEncoder,
        webp_data: *mut WebPData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPAnimEncoderGetError(enc: *mut WebPAnimEncoder) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn WebPAnimEncoderDelete(enc: *mut WebPAnimEncoder);
}
extern "C" {
    pub fn WebPGetEncoderVersion() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPEncodeRGB(
        rgb: *const u8,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        quality_factor: f32,
        output: *mut *mut u8,
    ) -> usize;
}
extern "C" {
    pub fn WebPEncodeBGR(
        bgr: *const u8,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        quality_factor: f32,
        output: *mut *mut u8,
    ) -> usize;
}
extern "C" {
    pub fn WebPEncodeRGBA(
        rgba: *const u8,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        quality_factor: f32,
        output: *mut *mut u8,
    ) -> usize;
}
extern "C" {
    pub fn WebPEncodeBGRA(
        bgra: *const u8,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        quality_factor: f32,
        output: *mut *mut u8,
    ) -> usize;
}
extern "C" {
    pub fn WebPEncodeLosslessRGB(
        rgb: *const u8,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        output: *mut *mut u8,
    ) -> usize;
}
extern "C" {
    pub fn WebPEncodeLosslessBGR(
        bgr: *const u8,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        output: *mut *mut u8,
    ) -> usize;
}
extern "C" {
    pub fn WebPEncodeLosslessRGBA(
        rgba: *const u8,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        output: *mut *mut u8,
    ) -> usize;
}
extern "C" {
    pub fn WebPEncodeLosslessBGRA(
        bgra: *const u8,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
        output: *mut *mut u8,
    ) -> usize;
}
extern "C" {
    pub fn WebPFree(ptr: *mut ::std::os::raw::c_void);
}
pub const WebPImageHint_WEBP_HINT_DEFAULT: WebPImageHint = 0;
pub const WebPImageHint_WEBP_HINT_PICTURE: WebPImageHint = 1;
pub const WebPImageHint_WEBP_HINT_PHOTO: WebPImageHint = 2;
pub const WebPImageHint_WEBP_HINT_GRAPH: WebPImageHint = 3;
pub const WebPImageHint_WEBP_HINT_LAST: WebPImageHint = 4;
pub type WebPImageHint = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WebPConfig {
    pub lossless: ::std::os::raw::c_int,
    pub quality: f32,
    pub method: ::std::os::raw::c_int,
    pub image_hint: WebPImageHint,
    pub target_size: ::std::os::raw::c_int,
    pub target_PSNR: f32,
    pub segments: ::std::os::raw::c_int,
    pub sns_strength: ::std::os::raw::c_int,
    pub filter_strength: ::std::os::raw::c_int,
    pub filter_sharpness: ::std::os::raw::c_int,
    pub filter_type: ::std::os::raw::c_int,
    pub autofilter: ::std::os::raw::c_int,
    pub alpha_compression: ::std::os::raw::c_int,
    pub alpha_filtering: ::std::os::raw::c_int,
    pub alpha_quality: ::std::os::raw::c_int,
    pub pass: ::std::os::raw::c_int,
    pub show_compressed: ::std::os::raw::c_int,
    pub preprocessing: ::std::os::raw::c_int,
    pub partitions: ::std::os::raw::c_int,
    pub partition_limit: ::std::os::raw::c_int,
    pub emulate_jpeg_size: ::std::os::raw::c_int,
    pub thread_level: ::std::os::raw::c_int,
    pub low_memory: ::std::os::raw::c_int,
    pub near_lossless: ::std::os::raw::c_int,
    pub exact: ::std::os::raw::c_int,
    pub use_delta_palette: ::std::os::raw::c_int,
    pub use_sharp_yuv: ::std::os::raw::c_int,
    pub pad: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_WebPConfig() {
    assert_eq!(
        ::std::mem::size_of::<WebPConfig>(),
        116usize,
        concat!("Size of: ", stringify!(WebPConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(WebPConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).lossless as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(lossless)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).quality as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(quality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).method as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).image_hint as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(image_hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).target_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(target_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).target_PSNR as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(target_PSNR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).segments as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(segments)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).sns_strength as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(sns_strength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).filter_strength as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(filter_strength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).filter_sharpness as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(filter_sharpness)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).filter_type as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(filter_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).autofilter as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(autofilter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).alpha_compression as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(alpha_compression)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).alpha_filtering as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(alpha_filtering)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).alpha_quality as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(alpha_quality)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).pass as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(pass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).show_compressed as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(show_compressed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).preprocessing as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(preprocessing)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).partitions as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(partitions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).partition_limit as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(partition_limit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).emulate_jpeg_size as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(emulate_jpeg_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).thread_level as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(thread_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).low_memory as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(low_memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).near_lossless as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(near_lossless)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).exact as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(exact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).use_delta_palette as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(use_delta_palette)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).use_sharp_yuv as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(use_sharp_yuv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPConfig>())).pad as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPConfig),
            "::",
            stringify!(pad)
        )
    );
}
impl Default for WebPConfig {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const WebPPreset_WEBP_PRESET_DEFAULT: WebPPreset = 0;
pub const WebPPreset_WEBP_PRESET_PICTURE: WebPPreset = 1;
pub const WebPPreset_WEBP_PRESET_PHOTO: WebPPreset = 2;
pub const WebPPreset_WEBP_PRESET_DRAWING: WebPPreset = 3;
pub const WebPPreset_WEBP_PRESET_ICON: WebPPreset = 4;
pub const WebPPreset_WEBP_PRESET_TEXT: WebPPreset = 5;
pub type WebPPreset = u32;
extern "C" {
    pub fn WebPConfigInitInternal(
        arg1: *mut WebPConfig,
        arg2: WebPPreset,
        arg3: f32,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPConfigLosslessPreset(
        config: *mut WebPConfig,
        level: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPValidateConfig(config: *const WebPConfig) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WebPAuxStats {
    pub coded_size: ::std::os::raw::c_int,
    pub PSNR: [f32; 5usize],
    pub block_count: [::std::os::raw::c_int; 3usize],
    pub header_bytes: [::std::os::raw::c_int; 2usize],
    pub residual_bytes: [[::std::os::raw::c_int; 4usize]; 3usize],
    pub segment_size: [::std::os::raw::c_int; 4usize],
    pub segment_quant: [::std::os::raw::c_int; 4usize],
    pub segment_level: [::std::os::raw::c_int; 4usize],
    pub alpha_data_size: ::std::os::raw::c_int,
    pub layer_data_size: ::std::os::raw::c_int,
    pub lossless_features: u32,
    pub histogram_bits: ::std::os::raw::c_int,
    pub transform_bits: ::std::os::raw::c_int,
    pub cache_bits: ::std::os::raw::c_int,
    pub palette_size: ::std::os::raw::c_int,
    pub lossless_size: ::std::os::raw::c_int,
    pub lossless_hdr_size: ::std::os::raw::c_int,
    pub lossless_data_size: ::std::os::raw::c_int,
    pub pad: [u32; 2usize],
}
#[test]
fn bindgen_test_layout_WebPAuxStats() {
    assert_eq!(
        ::std::mem::size_of::<WebPAuxStats>(),
        188usize,
        concat!("Size of: ", stringify!(WebPAuxStats))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPAuxStats>(),
        4usize,
        concat!("Alignment of ", stringify!(WebPAuxStats))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).coded_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(coded_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).PSNR as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(PSNR)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).block_count as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(block_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).header_bytes as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(header_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).residual_bytes as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(residual_bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).segment_size as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(segment_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).segment_quant as *const _ as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(segment_quant)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).segment_level as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(segment_level)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).alpha_data_size as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(alpha_data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).layer_data_size as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(layer_data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).lossless_features as *const _ as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(lossless_features)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).histogram_bits as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(histogram_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).transform_bits as *const _ as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(transform_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).cache_bits as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(cache_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).palette_size as *const _ as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(palette_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).lossless_size as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(lossless_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).lossless_hdr_size as *const _ as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(lossless_hdr_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).lossless_data_size as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(lossless_data_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPAuxStats>())).pad as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPAuxStats),
            "::",
            stringify!(pad)
        )
    );
}
pub type WebPWriterFunction = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const u8,
        data_size: usize,
        picture: *const WebPPicture,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WebPMemoryWriter {
    pub mem: *mut u8,
    pub size: usize,
    pub max_size: usize,
    pub pad: [u32; 1usize],
}
#[test]
fn bindgen_test_layout_WebPMemoryWriter() {
    assert_eq!(
        ::std::mem::size_of::<WebPMemoryWriter>(),
        32usize,
        concat!("Size of: ", stringify!(WebPMemoryWriter))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPMemoryWriter>(),
        8usize,
        concat!("Alignment of ", stringify!(WebPMemoryWriter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMemoryWriter>())).mem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMemoryWriter),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMemoryWriter>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMemoryWriter),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMemoryWriter>())).max_size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMemoryWriter),
            "::",
            stringify!(max_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPMemoryWriter>())).pad as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPMemoryWriter),
            "::",
            stringify!(pad)
        )
    );
}
impl Default for WebPMemoryWriter {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn WebPMemoryWriterInit(writer: *mut WebPMemoryWriter);
}
extern "C" {
    pub fn WebPMemoryWriterClear(writer: *mut WebPMemoryWriter);
}
extern "C" {
    pub fn WebPMemoryWrite(
        data: *const u8,
        data_size: usize,
        picture: *const WebPPicture,
    ) -> ::std::os::raw::c_int;
}
pub type WebPProgressHook = ::std::option::Option<
    unsafe extern "C" fn(
        percent: ::std::os::raw::c_int,
        picture: *const WebPPicture,
    ) -> ::std::os::raw::c_int,
>;
pub const WebPEncCSP_WEBP_YUV420: WebPEncCSP = 0;
pub const WebPEncCSP_WEBP_YUV420A: WebPEncCSP = 4;
pub const WebPEncCSP_WEBP_CSP_UV_MASK: WebPEncCSP = 3;
pub const WebPEncCSP_WEBP_CSP_ALPHA_BIT: WebPEncCSP = 4;
pub type WebPEncCSP = u32;
pub const WebPEncodingError_VP8_ENC_OK: WebPEncodingError = 0;
pub const WebPEncodingError_VP8_ENC_ERROR_OUT_OF_MEMORY: WebPEncodingError = 1;
pub const WebPEncodingError_VP8_ENC_ERROR_BITSTREAM_OUT_OF_MEMORY: WebPEncodingError = 2;
pub const WebPEncodingError_VP8_ENC_ERROR_NULL_PARAMETER: WebPEncodingError = 3;
pub const WebPEncodingError_VP8_ENC_ERROR_INVALID_CONFIGURATION: WebPEncodingError = 4;
pub const WebPEncodingError_VP8_ENC_ERROR_BAD_DIMENSION: WebPEncodingError = 5;
pub const WebPEncodingError_VP8_ENC_ERROR_PARTITION0_OVERFLOW: WebPEncodingError = 6;
pub const WebPEncodingError_VP8_ENC_ERROR_PARTITION_OVERFLOW: WebPEncodingError = 7;
pub const WebPEncodingError_VP8_ENC_ERROR_BAD_WRITE: WebPEncodingError = 8;
pub const WebPEncodingError_VP8_ENC_ERROR_FILE_TOO_BIG: WebPEncodingError = 9;
pub const WebPEncodingError_VP8_ENC_ERROR_USER_ABORT: WebPEncodingError = 10;
pub const WebPEncodingError_VP8_ENC_ERROR_LAST: WebPEncodingError = 11;
pub type WebPEncodingError = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WebPPicture {
    #[doc = ""]
    pub use_argb: ::std::os::raw::c_int,
    pub colorspace: WebPEncCSP,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub y: *mut u8,
    pub u: *mut u8,
    pub v: *mut u8,
    pub y_stride: ::std::os::raw::c_int,
    pub uv_stride: ::std::os::raw::c_int,
    pub a: *mut u8,
    pub a_stride: ::std::os::raw::c_int,
    pub pad1: [u32; 2usize],
    pub argb: *mut u32,
    pub argb_stride: ::std::os::raw::c_int,
    pub pad2: [u32; 3usize],
    #[doc = ""]
    pub writer: WebPWriterFunction,
    pub custom_ptr: *mut ::std::os::raw::c_void,
    pub extra_info_type: ::std::os::raw::c_int,
    pub extra_info: *mut u8,
    #[doc = ""]
    pub stats: *mut WebPAuxStats,
    pub error_code: WebPEncodingError,
    pub progress_hook: WebPProgressHook,
    pub user_data: *mut ::std::os::raw::c_void,
    pub pad3: [u32; 3usize],
    pub pad4: *mut u8,
    pub pad5: *mut u8,
    pub pad6: [u32; 8usize],
    #[doc = ""]
    pub memory_: *mut ::std::os::raw::c_void,
    pub memory_argb_: *mut ::std::os::raw::c_void,
    pub pad7: [*mut ::std::os::raw::c_void; 2usize],
}
#[test]
fn bindgen_test_layout_WebPPicture() {
    assert_eq!(
        ::std::mem::size_of::<WebPPicture>(),
        256usize,
        concat!("Size of: ", stringify!(WebPPicture))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPPicture>(),
        8usize,
        concat!("Alignment of ", stringify!(WebPPicture))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).use_argb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(use_argb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).colorspace as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(colorspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).y as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).u as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).v as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).y_stride as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(y_stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).uv_stride as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(uv_stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).a as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).a_stride as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(a_stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).pad1 as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).argb as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(argb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).argb_stride as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(argb_stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).pad2 as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).writer as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(writer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).custom_ptr as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(custom_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).extra_info_type as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(extra_info_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).extra_info as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(extra_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).stats as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).error_code as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(error_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).progress_hook as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(progress_hook)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).user_data as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(user_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).pad3 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).pad6 as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(pad6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).memory_ as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(memory_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).memory_argb_ as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(memory_argb_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPPicture>())).pad7 as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPPicture),
            "::",
            stringify!(pad7)
        )
    );
}
impl Default for WebPPicture {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn WebPPictureInitInternal(
        arg1: *mut WebPPicture,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureAlloc(picture: *mut WebPPicture) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureFree(picture: *mut WebPPicture);
}
extern "C" {
    pub fn WebPPictureCopy(src: *const WebPPicture, dst: *mut WebPPicture)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPlaneDistortion(
        src: *const u8,
        src_stride: usize,
        ref_: *const u8,
        ref_stride: usize,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        x_step: usize,
        type_: ::std::os::raw::c_int,
        distortion: *mut f32,
        result: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureDistortion(
        src: *const WebPPicture,
        ref_: *const WebPPicture,
        metric_type: ::std::os::raw::c_int,
        result: *mut f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureCrop(
        picture: *mut WebPPicture,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureView(
        src: *const WebPPicture,
        left: ::std::os::raw::c_int,
        top: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        dst: *mut WebPPicture,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureIsView(picture: *const WebPPicture) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureRescale(
        pic: *mut WebPPicture,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureImportRGB(
        picture: *mut WebPPicture,
        rgb: *const u8,
        rgb_stride: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureImportRGBA(
        picture: *mut WebPPicture,
        rgba: *const u8,
        rgba_stride: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureImportRGBX(
        picture: *mut WebPPicture,
        rgbx: *const u8,
        rgbx_stride: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureImportBGR(
        picture: *mut WebPPicture,
        bgr: *const u8,
        bgr_stride: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureImportBGRA(
        picture: *mut WebPPicture,
        bgra: *const u8,
        bgra_stride: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureImportBGRX(
        picture: *mut WebPPicture,
        bgrx: *const u8,
        bgrx_stride: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureARGBToYUVA(
        picture: *mut WebPPicture,
        arg1: WebPEncCSP,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureARGBToYUVADithered(
        picture: *mut WebPPicture,
        colorspace: WebPEncCSP,
        dithering: f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureSharpARGBToYUVA(picture: *mut WebPPicture) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureSmartARGBToYUVA(picture: *mut WebPPicture) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPPictureYUVAToARGB(picture: *mut WebPPicture) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPCleanupTransparentArea(picture: *mut WebPPicture);
}
extern "C" {
    pub fn WebPPictureHasTransparency(picture: *const WebPPicture) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPBlendAlpha(pic: *mut WebPPicture, background_rgb: u32);
}
extern "C" {
    pub fn WebPEncode(
        config: *const WebPConfig,
        picture: *mut WebPPicture,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WebPIDecoder {
    _unused: [u8; 0],
}
extern "C" {
    pub fn WebPGetDecoderVersion() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPGetInfo(
        data: *const u8,
        data_size: usize,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPDecodeRGBA(
        data: *const u8,
        data_size: usize,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPDecodeARGB(
        data: *const u8,
        data_size: usize,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPDecodeBGRA(
        data: *const u8,
        data_size: usize,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPDecodeRGB(
        data: *const u8,
        data_size: usize,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPDecodeBGR(
        data: *const u8,
        data_size: usize,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPDecodeYUV(
        data: *const u8,
        data_size: usize,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        u: *mut *mut u8,
        v: *mut *mut u8,
        stride: *mut ::std::os::raw::c_int,
        uv_stride: *mut ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPDecodeRGBAInto(
        data: *const u8,
        data_size: usize,
        output_buffer: *mut u8,
        output_buffer_size: usize,
        output_stride: ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPDecodeARGBInto(
        data: *const u8,
        data_size: usize,
        output_buffer: *mut u8,
        output_buffer_size: usize,
        output_stride: ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPDecodeBGRAInto(
        data: *const u8,
        data_size: usize,
        output_buffer: *mut u8,
        output_buffer_size: usize,
        output_stride: ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPDecodeRGBInto(
        data: *const u8,
        data_size: usize,
        output_buffer: *mut u8,
        output_buffer_size: usize,
        output_stride: ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPDecodeBGRInto(
        data: *const u8,
        data_size: usize,
        output_buffer: *mut u8,
        output_buffer_size: usize,
        output_stride: ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPDecodeYUVInto(
        data: *const u8,
        data_size: usize,
        luma: *mut u8,
        luma_size: usize,
        luma_stride: ::std::os::raw::c_int,
        u: *mut u8,
        u_size: usize,
        u_stride: ::std::os::raw::c_int,
        v: *mut u8,
        v_size: usize,
        v_stride: ::std::os::raw::c_int,
    ) -> *mut u8;
}
pub const WEBP_CSP_MODE_MODE_RGB: WEBP_CSP_MODE = 0;
pub const WEBP_CSP_MODE_MODE_RGBA: WEBP_CSP_MODE = 1;
pub const WEBP_CSP_MODE_MODE_BGR: WEBP_CSP_MODE = 2;
pub const WEBP_CSP_MODE_MODE_BGRA: WEBP_CSP_MODE = 3;
pub const WEBP_CSP_MODE_MODE_ARGB: WEBP_CSP_MODE = 4;
pub const WEBP_CSP_MODE_MODE_RGBA_4444: WEBP_CSP_MODE = 5;
pub const WEBP_CSP_MODE_MODE_RGB_565: WEBP_CSP_MODE = 6;
pub const WEBP_CSP_MODE_MODE_rgbA: WEBP_CSP_MODE = 7;
pub const WEBP_CSP_MODE_MODE_bgrA: WEBP_CSP_MODE = 8;
pub const WEBP_CSP_MODE_MODE_Argb: WEBP_CSP_MODE = 9;
pub const WEBP_CSP_MODE_MODE_rgbA_4444: WEBP_CSP_MODE = 10;
pub const WEBP_CSP_MODE_MODE_YUV: WEBP_CSP_MODE = 11;
pub const WEBP_CSP_MODE_MODE_YUVA: WEBP_CSP_MODE = 12;
pub const WEBP_CSP_MODE_MODE_LAST: WEBP_CSP_MODE = 13;
pub type WEBP_CSP_MODE = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WebPRGBABuffer {
    pub rgba: *mut u8,
    pub stride: ::std::os::raw::c_int,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_WebPRGBABuffer() {
    assert_eq!(
        ::std::mem::size_of::<WebPRGBABuffer>(),
        24usize,
        concat!("Size of: ", stringify!(WebPRGBABuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPRGBABuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(WebPRGBABuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPRGBABuffer>())).rgba as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPRGBABuffer),
            "::",
            stringify!(rgba)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPRGBABuffer>())).stride as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPRGBABuffer),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPRGBABuffer>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPRGBABuffer),
            "::",
            stringify!(size)
        )
    );
}
impl Default for WebPRGBABuffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WebPYUVABuffer {
    pub y: *mut u8,
    pub u: *mut u8,
    pub v: *mut u8,
    pub a: *mut u8,
    pub y_stride: ::std::os::raw::c_int,
    pub u_stride: ::std::os::raw::c_int,
    pub v_stride: ::std::os::raw::c_int,
    pub a_stride: ::std::os::raw::c_int,
    pub y_size: usize,
    pub u_size: usize,
    pub v_size: usize,
    pub a_size: usize,
}
#[test]
fn bindgen_test_layout_WebPYUVABuffer() {
    assert_eq!(
        ::std::mem::size_of::<WebPYUVABuffer>(),
        80usize,
        concat!("Size of: ", stringify!(WebPYUVABuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPYUVABuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(WebPYUVABuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPYUVABuffer>())).y as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPYUVABuffer),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPYUVABuffer>())).u as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPYUVABuffer),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPYUVABuffer>())).v as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPYUVABuffer),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPYUVABuffer>())).a as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPYUVABuffer),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPYUVABuffer>())).y_stride as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPYUVABuffer),
            "::",
            stringify!(y_stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPYUVABuffer>())).u_stride as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPYUVABuffer),
            "::",
            stringify!(u_stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPYUVABuffer>())).v_stride as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPYUVABuffer),
            "::",
            stringify!(v_stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPYUVABuffer>())).a_stride as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPYUVABuffer),
            "::",
            stringify!(a_stride)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPYUVABuffer>())).y_size as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPYUVABuffer),
            "::",
            stringify!(y_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPYUVABuffer>())).u_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPYUVABuffer),
            "::",
            stringify!(u_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPYUVABuffer>())).v_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPYUVABuffer),
            "::",
            stringify!(v_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPYUVABuffer>())).a_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPYUVABuffer),
            "::",
            stringify!(a_size)
        )
    );
}
impl Default for WebPYUVABuffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WebPDecBuffer {
    pub colorspace: WEBP_CSP_MODE,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub is_external_memory: ::std::os::raw::c_int,
    pub u: WebPDecBuffer__bindgen_ty_1,
    pub pad: [u32; 4usize],
    pub private_memory: *mut u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union WebPDecBuffer__bindgen_ty_1 {
    pub RGBA: WebPRGBABuffer,
    pub YUVA: WebPYUVABuffer,
    _bindgen_union_align: [u64; 10usize],
}
#[test]
fn bindgen_test_layout_WebPDecBuffer__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<WebPDecBuffer__bindgen_ty_1>(),
        80usize,
        concat!("Size of: ", stringify!(WebPDecBuffer__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPDecBuffer__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(WebPDecBuffer__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WebPDecBuffer__bindgen_ty_1>())).RGBA as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecBuffer__bindgen_ty_1),
            "::",
            stringify!(RGBA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WebPDecBuffer__bindgen_ty_1>())).YUVA as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecBuffer__bindgen_ty_1),
            "::",
            stringify!(YUVA)
        )
    );
}
impl Default for WebPDecBuffer__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout_WebPDecBuffer() {
    assert_eq!(
        ::std::mem::size_of::<WebPDecBuffer>(),
        120usize,
        concat!("Size of: ", stringify!(WebPDecBuffer))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPDecBuffer>(),
        8usize,
        concat!("Alignment of ", stringify!(WebPDecBuffer))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecBuffer>())).colorspace as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecBuffer),
            "::",
            stringify!(colorspace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecBuffer>())).width as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecBuffer),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecBuffer>())).height as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecBuffer),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WebPDecBuffer>())).is_external_memory as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecBuffer),
            "::",
            stringify!(is_external_memory)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecBuffer>())).u as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecBuffer),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecBuffer>())).pad as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecBuffer),
            "::",
            stringify!(pad)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecBuffer>())).private_memory as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecBuffer),
            "::",
            stringify!(private_memory)
        )
    );
}
impl Default for WebPDecBuffer {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn WebPInitDecBufferInternal(
        arg1: *mut WebPDecBuffer,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPFreeDecBuffer(buffer: *mut WebPDecBuffer);
}
pub const VP8StatusCode_VP8_STATUS_OK: VP8StatusCode = 0;
pub const VP8StatusCode_VP8_STATUS_OUT_OF_MEMORY: VP8StatusCode = 1;
pub const VP8StatusCode_VP8_STATUS_INVALID_PARAM: VP8StatusCode = 2;
pub const VP8StatusCode_VP8_STATUS_BITSTREAM_ERROR: VP8StatusCode = 3;
pub const VP8StatusCode_VP8_STATUS_UNSUPPORTED_FEATURE: VP8StatusCode = 4;
pub const VP8StatusCode_VP8_STATUS_SUSPENDED: VP8StatusCode = 5;
pub const VP8StatusCode_VP8_STATUS_USER_ABORT: VP8StatusCode = 6;
pub const VP8StatusCode_VP8_STATUS_NOT_ENOUGH_DATA: VP8StatusCode = 7;
pub type VP8StatusCode = u32;
extern "C" {
    pub fn WebPINewDecoder(output_buffer: *mut WebPDecBuffer) -> *mut WebPIDecoder;
}
extern "C" {
    pub fn WebPINewRGB(
        csp: WEBP_CSP_MODE,
        output_buffer: *mut u8,
        output_buffer_size: usize,
        output_stride: ::std::os::raw::c_int,
    ) -> *mut WebPIDecoder;
}
extern "C" {
    pub fn WebPINewYUVA(
        luma: *mut u8,
        luma_size: usize,
        luma_stride: ::std::os::raw::c_int,
        u: *mut u8,
        u_size: usize,
        u_stride: ::std::os::raw::c_int,
        v: *mut u8,
        v_size: usize,
        v_stride: ::std::os::raw::c_int,
        a: *mut u8,
        a_size: usize,
        a_stride: ::std::os::raw::c_int,
    ) -> *mut WebPIDecoder;
}
extern "C" {
    pub fn WebPINewYUV(
        luma: *mut u8,
        luma_size: usize,
        luma_stride: ::std::os::raw::c_int,
        u: *mut u8,
        u_size: usize,
        u_stride: ::std::os::raw::c_int,
        v: *mut u8,
        v_size: usize,
        v_stride: ::std::os::raw::c_int,
    ) -> *mut WebPIDecoder;
}
extern "C" {
    pub fn WebPIDelete(idec: *mut WebPIDecoder);
}
extern "C" {
    pub fn WebPIAppend(idec: *mut WebPIDecoder, data: *const u8, data_size: usize)
        -> VP8StatusCode;
}
extern "C" {
    pub fn WebPIUpdate(idec: *mut WebPIDecoder, data: *const u8, data_size: usize)
        -> VP8StatusCode;
}
extern "C" {
    pub fn WebPIDecGetRGB(
        idec: *const WebPIDecoder,
        last_y: *mut ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        stride: *mut ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPIDecGetYUVA(
        idec: *const WebPIDecoder,
        last_y: *mut ::std::os::raw::c_int,
        u: *mut *mut u8,
        v: *mut *mut u8,
        a: *mut *mut u8,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
        stride: *mut ::std::os::raw::c_int,
        uv_stride: *mut ::std::os::raw::c_int,
        a_stride: *mut ::std::os::raw::c_int,
    ) -> *mut u8;
}
extern "C" {
    pub fn WebPIDecodedArea(
        idec: *const WebPIDecoder,
        left: *mut ::std::os::raw::c_int,
        top: *mut ::std::os::raw::c_int,
        width: *mut ::std::os::raw::c_int,
        height: *mut ::std::os::raw::c_int,
    ) -> *const WebPDecBuffer;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WebPBitstreamFeatures {
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub has_alpha: ::std::os::raw::c_int,
    pub has_animation: ::std::os::raw::c_int,
    pub format: ::std::os::raw::c_int,
    pub pad: [u32; 5usize],
}
#[test]
fn bindgen_test_layout_WebPBitstreamFeatures() {
    assert_eq!(
        ::std::mem::size_of::<WebPBitstreamFeatures>(),
        40usize,
        concat!("Size of: ", stringify!(WebPBitstreamFeatures))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPBitstreamFeatures>(),
        4usize,
        concat!("Alignment of ", stringify!(WebPBitstreamFeatures))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPBitstreamFeatures>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPBitstreamFeatures),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPBitstreamFeatures>())).height as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPBitstreamFeatures),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPBitstreamFeatures>())).has_alpha as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPBitstreamFeatures),
            "::",
            stringify!(has_alpha)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WebPBitstreamFeatures>())).has_animation as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPBitstreamFeatures),
            "::",
            stringify!(has_animation)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPBitstreamFeatures>())).format as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPBitstreamFeatures),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPBitstreamFeatures>())).pad as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPBitstreamFeatures),
            "::",
            stringify!(pad)
        )
    );
}
extern "C" {
    pub fn WebPGetFeaturesInternal(
        arg1: *const u8,
        arg2: usize,
        arg3: *mut WebPBitstreamFeatures,
        arg4: ::std::os::raw::c_int,
    ) -> VP8StatusCode;
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct WebPDecoderOptions {
    pub bypass_filtering: ::std::os::raw::c_int,
    pub no_fancy_upsampling: ::std::os::raw::c_int,
    pub use_cropping: ::std::os::raw::c_int,
    pub crop_left: ::std::os::raw::c_int,
    pub crop_top: ::std::os::raw::c_int,
    pub crop_width: ::std::os::raw::c_int,
    pub crop_height: ::std::os::raw::c_int,
    pub use_scaling: ::std::os::raw::c_int,
    pub scaled_width: ::std::os::raw::c_int,
    pub scaled_height: ::std::os::raw::c_int,
    pub use_threads: ::std::os::raw::c_int,
    pub dithering_strength: ::std::os::raw::c_int,
    pub flip: ::std::os::raw::c_int,
    pub alpha_dithering_strength: ::std::os::raw::c_int,
    pub pad: [u32; 5usize],
}
#[test]
fn bindgen_test_layout_WebPDecoderOptions() {
    assert_eq!(
        ::std::mem::size_of::<WebPDecoderOptions>(),
        76usize,
        concat!("Size of: ", stringify!(WebPDecoderOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPDecoderOptions>(),
        4usize,
        concat!("Alignment of ", stringify!(WebPDecoderOptions))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WebPDecoderOptions>())).bypass_filtering as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(bypass_filtering)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WebPDecoderOptions>())).no_fancy_upsampling as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(no_fancy_upsampling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderOptions>())).use_cropping as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(use_cropping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderOptions>())).crop_left as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(crop_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderOptions>())).crop_top as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(crop_top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderOptions>())).crop_width as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(crop_width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderOptions>())).crop_height as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(crop_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderOptions>())).use_scaling as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(use_scaling)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderOptions>())).scaled_width as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(scaled_width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WebPDecoderOptions>())).scaled_height as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(scaled_height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderOptions>())).use_threads as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(use_threads)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WebPDecoderOptions>())).dithering_strength as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(dithering_strength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderOptions>())).flip as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(flip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<WebPDecoderOptions>())).alpha_dithering_strength as *const _
                as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(alpha_dithering_strength)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderOptions>())).pad as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderOptions),
            "::",
            stringify!(pad)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WebPDecoderConfig {
    pub input: WebPBitstreamFeatures,
    pub output: WebPDecBuffer,
    pub options: WebPDecoderOptions,
}
#[test]
fn bindgen_test_layout_WebPDecoderConfig() {
    assert_eq!(
        ::std::mem::size_of::<WebPDecoderConfig>(),
        240usize,
        concat!("Size of: ", stringify!(WebPDecoderConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<WebPDecoderConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(WebPDecoderConfig))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderConfig>())).input as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderConfig),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderConfig>())).output as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderConfig),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<WebPDecoderConfig>())).options as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(WebPDecoderConfig),
            "::",
            stringify!(options)
        )
    );
}
impl Default for WebPDecoderConfig {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn WebPInitDecoderConfigInternal(
        arg1: *mut WebPDecoderConfig,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WebPIDecode(
        data: *const u8,
        data_size: usize,
        config: *mut WebPDecoderConfig,
    ) -> *mut WebPIDecoder;
}
extern "C" {
    pub fn WebPDecode(
        data: *const u8,
        data_size: usize,
        config: *mut WebPDecoderConfig,
    ) -> VP8StatusCode;
}
pub type GifPixelType = ::std::os::raw::c_uchar;
pub type GifRowType = *mut ::std::os::raw::c_uchar;
pub type GifByteType = ::std::os::raw::c_uchar;
pub type GifPrefixType = ::std::os::raw::c_uint;
pub type GifWord = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GifColorType {
    pub Red: GifByteType,
    pub Green: GifByteType,
    pub Blue: GifByteType,
}
#[test]
fn bindgen_test_layout_GifColorType() {
    assert_eq!(
        ::std::mem::size_of::<GifColorType>(),
        3usize,
        concat!("Size of: ", stringify!(GifColorType))
    );
    assert_eq!(
        ::std::mem::align_of::<GifColorType>(),
        1usize,
        concat!("Alignment of ", stringify!(GifColorType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifColorType>())).Red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GifColorType),
            "::",
            stringify!(Red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifColorType>())).Green as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(GifColorType),
            "::",
            stringify!(Green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifColorType>())).Blue as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(GifColorType),
            "::",
            stringify!(Blue)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ColorMapObject {
    pub ColorCount: ::std::os::raw::c_int,
    pub BitsPerPixel: ::std::os::raw::c_int,
    pub SortFlag: bool,
    pub Colors: *mut GifColorType,
}
#[test]
fn bindgen_test_layout_ColorMapObject() {
    assert_eq!(
        ::std::mem::size_of::<ColorMapObject>(),
        24usize,
        concat!("Size of: ", stringify!(ColorMapObject))
    );
    assert_eq!(
        ::std::mem::align_of::<ColorMapObject>(),
        8usize,
        concat!("Alignment of ", stringify!(ColorMapObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColorMapObject>())).ColorCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorMapObject),
            "::",
            stringify!(ColorCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColorMapObject>())).BitsPerPixel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorMapObject),
            "::",
            stringify!(BitsPerPixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColorMapObject>())).SortFlag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorMapObject),
            "::",
            stringify!(SortFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ColorMapObject>())).Colors as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ColorMapObject),
            "::",
            stringify!(Colors)
        )
    );
}
impl Default for ColorMapObject {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GifImageDesc {
    pub Left: GifWord,
    pub Top: GifWord,
    pub Width: GifWord,
    pub Height: GifWord,
    pub Interlace: bool,
    pub ColorMap: *mut ColorMapObject,
}
#[test]
fn bindgen_test_layout_GifImageDesc() {
    assert_eq!(
        ::std::mem::size_of::<GifImageDesc>(),
        32usize,
        concat!("Size of: ", stringify!(GifImageDesc))
    );
    assert_eq!(
        ::std::mem::align_of::<GifImageDesc>(),
        8usize,
        concat!("Alignment of ", stringify!(GifImageDesc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifImageDesc>())).Left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GifImageDesc),
            "::",
            stringify!(Left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifImageDesc>())).Top as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GifImageDesc),
            "::",
            stringify!(Top)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifImageDesc>())).Width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GifImageDesc),
            "::",
            stringify!(Width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifImageDesc>())).Height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GifImageDesc),
            "::",
            stringify!(Height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifImageDesc>())).Interlace as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GifImageDesc),
            "::",
            stringify!(Interlace)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifImageDesc>())).ColorMap as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GifImageDesc),
            "::",
            stringify!(ColorMap)
        )
    );
}
impl Default for GifImageDesc {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExtensionBlock {
    pub ByteCount: ::std::os::raw::c_int,
    pub Bytes: *mut GifByteType,
    pub Function: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ExtensionBlock() {
    assert_eq!(
        ::std::mem::size_of::<ExtensionBlock>(),
        24usize,
        concat!("Size of: ", stringify!(ExtensionBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<ExtensionBlock>(),
        8usize,
        concat!("Alignment of ", stringify!(ExtensionBlock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExtensionBlock>())).ByteCount as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtensionBlock),
            "::",
            stringify!(ByteCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExtensionBlock>())).Bytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtensionBlock),
            "::",
            stringify!(Bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ExtensionBlock>())).Function as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ExtensionBlock),
            "::",
            stringify!(Function)
        )
    );
}
impl Default for ExtensionBlock {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SavedImage {
    pub ImageDesc: GifImageDesc,
    pub RasterBits: *mut GifByteType,
    pub ExtensionBlockCount: ::std::os::raw::c_int,
    pub ExtensionBlocks: *mut ExtensionBlock,
}
#[test]
fn bindgen_test_layout_SavedImage() {
    assert_eq!(
        ::std::mem::size_of::<SavedImage>(),
        56usize,
        concat!("Size of: ", stringify!(SavedImage))
    );
    assert_eq!(
        ::std::mem::align_of::<SavedImage>(),
        8usize,
        concat!("Alignment of ", stringify!(SavedImage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SavedImage>())).ImageDesc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SavedImage),
            "::",
            stringify!(ImageDesc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SavedImage>())).RasterBits as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SavedImage),
            "::",
            stringify!(RasterBits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SavedImage>())).ExtensionBlockCount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SavedImage),
            "::",
            stringify!(ExtensionBlockCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SavedImage>())).ExtensionBlocks as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SavedImage),
            "::",
            stringify!(ExtensionBlocks)
        )
    );
}
impl Default for SavedImage {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GifFileType {
    pub SWidth: GifWord,
    pub SHeight: GifWord,
    pub SColorResolution: GifWord,
    pub SBackGroundColor: GifWord,
    pub AspectByte: GifByteType,
    pub SColorMap: *mut ColorMapObject,
    pub ImageCount: ::std::os::raw::c_int,
    pub Image: GifImageDesc,
    pub SavedImages: *mut SavedImage,
    pub ExtensionBlockCount: ::std::os::raw::c_int,
    pub ExtensionBlocks: *mut ExtensionBlock,
    pub Error: ::std::os::raw::c_int,
    pub UserData: *mut ::std::os::raw::c_void,
    pub Private: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_GifFileType() {
    assert_eq!(
        ::std::mem::size_of::<GifFileType>(),
        120usize,
        concat!("Size of: ", stringify!(GifFileType))
    );
    assert_eq!(
        ::std::mem::align_of::<GifFileType>(),
        8usize,
        concat!("Alignment of ", stringify!(GifFileType))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).SWidth as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(SWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).SHeight as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(SHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).SColorResolution as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(SColorResolution)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).SBackGroundColor as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(SBackGroundColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).AspectByte as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(AspectByte)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).SColorMap as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(SColorMap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).ImageCount as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(ImageCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).Image as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(Image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).SavedImages as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(SavedImages)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).ExtensionBlockCount as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(ExtensionBlockCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).ExtensionBlocks as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(ExtensionBlocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).Error as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(Error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).UserData as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(UserData)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GifFileType>())).Private as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(GifFileType),
            "::",
            stringify!(Private)
        )
    );
}
impl Default for GifFileType {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const GifRecordType_UNDEFINED_RECORD_TYPE: GifRecordType = 0;
pub const GifRecordType_SCREEN_DESC_RECORD_TYPE: GifRecordType = 1;
pub const GifRecordType_IMAGE_DESC_RECORD_TYPE: GifRecordType = 2;
pub const GifRecordType_EXTENSION_RECORD_TYPE: GifRecordType = 3;
pub const GifRecordType_TERMINATE_RECORD_TYPE: GifRecordType = 4;
pub type GifRecordType = u32;
pub type InputFunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut GifFileType,
        arg2: *mut GifByteType,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type OutputFunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut GifFileType,
        arg2: *const GifByteType,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
#[doc = "GIF89 structures"]
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GraphicsControlBlock {
    pub DisposalMode: ::std::os::raw::c_int,
    pub UserInputFlag: bool,
    pub DelayTime: ::std::os::raw::c_int,
    pub TransparentColor: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_GraphicsControlBlock() {
    assert_eq!(
        ::std::mem::size_of::<GraphicsControlBlock>(),
        16usize,
        concat!("Size of: ", stringify!(GraphicsControlBlock))
    );
    assert_eq!(
        ::std::mem::align_of::<GraphicsControlBlock>(),
        4usize,
        concat!("Alignment of ", stringify!(GraphicsControlBlock))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GraphicsControlBlock>())).DisposalMode as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphicsControlBlock),
            "::",
            stringify!(DisposalMode)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GraphicsControlBlock>())).UserInputFlag as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphicsControlBlock),
            "::",
            stringify!(UserInputFlag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GraphicsControlBlock>())).DelayTime as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphicsControlBlock),
            "::",
            stringify!(DelayTime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<GraphicsControlBlock>())).TransparentColor as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GraphicsControlBlock),
            "::",
            stringify!(TransparentColor)
        )
    );
}
extern "C" {
    #[doc = "GIF encoding routines"]
    pub fn EGifOpenFileName(
        GifFileName: *const ::std::os::raw::c_char,
        GifTestExistence: bool,
        Error: *mut ::std::os::raw::c_int,
    ) -> *mut GifFileType;
}
extern "C" {
    pub fn EGifOpenFileHandle(
        GifFileHandle: ::std::os::raw::c_int,
        Error: *mut ::std::os::raw::c_int,
    ) -> *mut GifFileType;
}
extern "C" {
    pub fn EGifOpen(
        userPtr: *mut ::std::os::raw::c_void,
        writeFunc: OutputFunc,
        Error: *mut ::std::os::raw::c_int,
    ) -> *mut GifFileType;
}
extern "C" {
    pub fn EGifSpew(GifFile: *mut GifFileType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifGetGifVersion(GifFile: *mut GifFileType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn EGifCloseFile(
        GifFile: *mut GifFileType,
        ErrorCode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifPutScreenDesc(
        GifFile: *mut GifFileType,
        GifWidth: ::std::os::raw::c_int,
        GifHeight: ::std::os::raw::c_int,
        GifColorRes: ::std::os::raw::c_int,
        GifBackGround: ::std::os::raw::c_int,
        GifColorMap: *const ColorMapObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifPutImageDesc(
        GifFile: *mut GifFileType,
        GifLeft: ::std::os::raw::c_int,
        GifTop: ::std::os::raw::c_int,
        GifWidth: ::std::os::raw::c_int,
        GifHeight: ::std::os::raw::c_int,
        GifInterlace: bool,
        GifColorMap: *const ColorMapObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifSetGifVersion(GifFile: *mut GifFileType, gif89: bool);
}
extern "C" {
    pub fn EGifPutLine(
        GifFile: *mut GifFileType,
        GifLine: *mut GifPixelType,
        GifLineLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifPutPixel(GifFile: *mut GifFileType, GifPixel: GifPixelType)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifPutComment(
        GifFile: *mut GifFileType,
        GifComment: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifPutExtensionLeader(
        GifFile: *mut GifFileType,
        GifExtCode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifPutExtensionBlock(
        GifFile: *mut GifFileType,
        GifExtLen: ::std::os::raw::c_int,
        GifExtension: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifPutExtensionTrailer(GifFile: *mut GifFileType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifPutExtension(
        GifFile: *mut GifFileType,
        GifExtCode: ::std::os::raw::c_int,
        GifExtLen: ::std::os::raw::c_int,
        GifExtension: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifPutCode(
        GifFile: *mut GifFileType,
        GifCodeSize: ::std::os::raw::c_int,
        GifCodeBlock: *const GifByteType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifPutCodeNext(
        GifFile: *mut GifFileType,
        GifCodeBlock: *const GifByteType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "GIF decoding routines"]
    pub fn DGifOpenFileName(
        GifFileName: *const ::std::os::raw::c_char,
        Error: *mut ::std::os::raw::c_int,
    ) -> *mut GifFileType;
}
extern "C" {
    pub fn DGifOpenFileHandle(
        GifFileHandle: ::std::os::raw::c_int,
        Error: *mut ::std::os::raw::c_int,
    ) -> *mut GifFileType;
}
extern "C" {
    pub fn DGifSlurp(GifFile: *mut GifFileType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifOpen(
        userPtr: *mut ::std::os::raw::c_void,
        readFunc: InputFunc,
        Error: *mut ::std::os::raw::c_int,
    ) -> *mut GifFileType;
}
extern "C" {
    pub fn DGifCloseFile(
        GifFile: *mut GifFileType,
        ErrorCode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifGetScreenDesc(GifFile: *mut GifFileType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifGetRecordType(
        GifFile: *mut GifFileType,
        GifType: *mut GifRecordType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifGetImageHeader(GifFile: *mut GifFileType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifGetImageDesc(GifFile: *mut GifFileType) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifGetLine(
        GifFile: *mut GifFileType,
        GifLine: *mut GifPixelType,
        GifLineLen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifGetPixel(GifFile: *mut GifFileType, GifPixel: GifPixelType)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifGetExtension(
        GifFile: *mut GifFileType,
        GifExtCode: *mut ::std::os::raw::c_int,
        GifExtension: *mut *mut GifByteType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifGetExtensionNext(
        GifFile: *mut GifFileType,
        GifExtension: *mut *mut GifByteType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifGetCode(
        GifFile: *mut GifFileType,
        GifCodeSize: *mut ::std::os::raw::c_int,
        GifCodeBlock: *mut *mut GifByteType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifGetCodeNext(
        GifFile: *mut GifFileType,
        GifCodeBlock: *mut *mut GifByteType,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifGetLZCodes(
        GifFile: *mut GifFileType,
        GifCode: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn DGifGetGifVersion(GifFile: *mut GifFileType) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "Error handling and reporting."]
    pub fn GifErrorString(ErrorCode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[doc = "Color map handling from gif_alloc.c"]
    pub fn GifMakeMapObject(
        ColorCount: ::std::os::raw::c_int,
        ColorMap: *const GifColorType,
    ) -> *mut ColorMapObject;
}
extern "C" {
    pub fn GifFreeMapObject(Object: *mut ColorMapObject);
}
extern "C" {
    pub fn GifUnionColorMap(
        ColorIn1: *const ColorMapObject,
        ColorIn2: *const ColorMapObject,
        ColorTransIn2: *mut GifPixelType,
    ) -> *mut ColorMapObject;
}
extern "C" {
    pub fn GifBitSize(n: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = "Support for the in-core structures allocation (slurp mode)."]
    pub fn GifApplyTranslation(Image: *mut SavedImage, Translation: *mut GifPixelType);
}
extern "C" {
    pub fn GifAddExtensionBlock(
        ExtensionBlock_Count: *mut ::std::os::raw::c_int,
        ExtensionBlocks: *mut *mut ExtensionBlock,
        Function: ::std::os::raw::c_int,
        Len: ::std::os::raw::c_uint,
        ExtData: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GifFreeExtensions(
        ExtensionBlock_Count: *mut ::std::os::raw::c_int,
        ExtensionBlocks: *mut *mut ExtensionBlock,
    );
}
extern "C" {
    pub fn GifMakeSavedImage(
        GifFile: *mut GifFileType,
        CopyFrom: *const SavedImage,
    ) -> *mut SavedImage;
}
extern "C" {
    pub fn GifFreeSavedImages(GifFile: *mut GifFileType);
}
extern "C" {
    #[doc = "5.x functions for GIF89 graphics control blocks"]
    pub fn DGifExtensionToGCB(
        GifExtensionLength: usize,
        GifExtension: *const GifByteType,
        GCB: *mut GraphicsControlBlock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifGCBToExtension(
        GCB: *const GraphicsControlBlock,
        GifExtension: *mut GifByteType,
    ) -> usize;
}
extern "C" {
    pub fn DGifSavedExtensionToGCB(
        GifFile: *mut GifFileType,
        ImageIndex: ::std::os::raw::c_int,
        GCB: *mut GraphicsControlBlock,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EGifGCBToSavedExtension(
        GCB: *const GraphicsControlBlock,
        GifFile: *mut GifFileType,
        ImageIndex: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GifDrawText8x8(
        Image: *mut SavedImage,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        legend: *const ::std::os::raw::c_char,
        color: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GifDrawBox(
        Image: *mut SavedImage,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GifDrawRectangle(
        Image: *mut SavedImage,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
        color: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn GifDrawBoxedText8x8(
        Image: *mut SavedImage,
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        legend: *const ::std::os::raw::c_char,
        border: ::std::os::raw::c_int,
        bg: ::std::os::raw::c_int,
        fg: ::std::os::raw::c_int,
    );
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
impl Default for __mbstate_t__bindgen_ty_1 {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
impl Default for __mbstate_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
impl Default for _G_fpos64_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._codecvt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._wide_data as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_list as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._freeres_buf as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
impl Default for _IO_FILE {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type fpos_t = __fpos_t;
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type __jmp_buf = [::std::os::raw::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: ::std::os::raw::c_int,
    pub __saved_mask: __sigset_t,
}
#[test]
fn bindgen_test_layout___jmp_buf_tag() {
    assert_eq!(
        ::std::mem::size_of::<__jmp_buf_tag>(),
        200usize,
        concat!("Size of: ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__jmp_buf_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__jmp_buf_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__jmpbuf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__jmpbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__mask_was_saved as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__mask_was_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__jmp_buf_tag>())).__saved_mask as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__jmp_buf_tag),
            "::",
            stringify!(__saved_mask)
        )
    );
}
pub type jmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __sigsetjmp(
        __env: *mut __jmp_buf_tag,
        __savemask: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _setjmp(__env: *mut __jmp_buf_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _longjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
pub type sigjmp_buf = [__jmp_buf_tag; 1usize];
extern "C" {
    pub fn siglongjmp(__env: *mut __jmp_buf_tag, __val: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
impl Default for tm {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type png_byte = ::std::os::raw::c_uchar;
pub type png_int_16 = ::std::os::raw::c_short;
pub type png_uint_16 = ::std::os::raw::c_ushort;
pub type png_int_32 = ::std::os::raw::c_int;
pub type png_uint_32 = ::std::os::raw::c_uint;
pub type png_size_t = usize;
pub type png_ptrdiff_t = isize;
pub type png_alloc_size_t = usize;
pub type png_fixed_point = png_int_32;
pub type png_voidp = *mut ::std::os::raw::c_void;
pub type png_const_voidp = *const ::std::os::raw::c_void;
pub type png_bytep = *mut png_byte;
pub type png_const_bytep = *const png_byte;
pub type png_uint_32p = *mut png_uint_32;
pub type png_const_uint_32p = *const png_uint_32;
pub type png_int_32p = *mut png_int_32;
pub type png_const_int_32p = *const png_int_32;
pub type png_uint_16p = *mut png_uint_16;
pub type png_const_uint_16p = *const png_uint_16;
pub type png_int_16p = *mut png_int_16;
pub type png_const_int_16p = *const png_int_16;
pub type png_charp = *mut ::std::os::raw::c_char;
pub type png_const_charp = *const ::std::os::raw::c_char;
pub type png_fixed_point_p = *mut png_fixed_point;
pub type png_const_fixed_point_p = *const png_fixed_point;
pub type png_size_tp = *mut usize;
pub type png_const_size_tp = *const usize;
pub type png_FILE_p = *mut FILE;
pub type png_doublep = *mut f64;
pub type png_const_doublep = *const f64;
pub type png_bytepp = *mut *mut png_byte;
pub type png_uint_32pp = *mut *mut png_uint_32;
pub type png_int_32pp = *mut *mut png_int_32;
pub type png_uint_16pp = *mut *mut png_uint_16;
pub type png_int_16pp = *mut *mut png_int_16;
pub type png_const_charpp = *mut *const ::std::os::raw::c_char;
pub type png_charpp = *mut *mut ::std::os::raw::c_char;
pub type png_fixed_point_pp = *mut *mut png_fixed_point;
pub type png_doublepp = *mut *mut f64;
pub type png_charppp = *mut *mut *mut ::std::os::raw::c_char;
pub type png_libpng_version_1_6_37 = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct png_struct_def {
    _unused: [u8; 0],
}
pub type png_struct = png_struct_def;
pub type png_const_structp = *const png_struct;
pub type png_structp = *mut png_struct;
pub type png_structpp = *mut *mut png_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct png_info_def {
    _unused: [u8; 0],
}
pub type png_info = png_info_def;
pub type png_infop = *mut png_info;
pub type png_const_infop = *const png_info;
pub type png_infopp = *mut *mut png_info;
pub type png_structrp = *mut png_struct;
pub type png_const_structrp = *const png_struct;
pub type png_inforp = *mut png_info;
pub type png_const_inforp = *const png_info;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct png_color_struct {
    pub red: png_byte,
    pub green: png_byte,
    pub blue: png_byte,
}
#[test]
fn bindgen_test_layout_png_color_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_color_struct>(),
        3usize,
        concat!("Size of: ", stringify!(png_color_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_color_struct>(),
        1usize,
        concat!("Alignment of ", stringify!(png_color_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_struct>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_struct),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_struct>())).green as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_struct),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_struct>())).blue as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_struct),
            "::",
            stringify!(blue)
        )
    );
}
pub type png_color = png_color_struct;
pub type png_colorp = *mut png_color;
pub type png_const_colorp = *const png_color;
pub type png_colorpp = *mut *mut png_color;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct png_color_16_struct {
    pub index: png_byte,
    pub red: png_uint_16,
    pub green: png_uint_16,
    pub blue: png_uint_16,
    pub gray: png_uint_16,
}
#[test]
fn bindgen_test_layout_png_color_16_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_color_16_struct>(),
        10usize,
        concat!("Size of: ", stringify!(png_color_16_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_color_16_struct>(),
        2usize,
        concat!("Alignment of ", stringify!(png_color_16_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_16_struct>())).index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_16_struct),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_16_struct>())).red as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_16_struct),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_16_struct>())).green as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_16_struct),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_16_struct>())).blue as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_16_struct),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_16_struct>())).gray as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_16_struct),
            "::",
            stringify!(gray)
        )
    );
}
pub type png_color_16 = png_color_16_struct;
pub type png_color_16p = *mut png_color_16;
pub type png_const_color_16p = *const png_color_16;
pub type png_color_16pp = *mut *mut png_color_16;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct png_color_8_struct {
    pub red: png_byte,
    pub green: png_byte,
    pub blue: png_byte,
    pub gray: png_byte,
    pub alpha: png_byte,
}
#[test]
fn bindgen_test_layout_png_color_8_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_color_8_struct>(),
        5usize,
        concat!("Size of: ", stringify!(png_color_8_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_color_8_struct>(),
        1usize,
        concat!("Alignment of ", stringify!(png_color_8_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_8_struct>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_8_struct),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_8_struct>())).green as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_8_struct),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_8_struct>())).blue as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_8_struct),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_8_struct>())).gray as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_8_struct),
            "::",
            stringify!(gray)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_color_8_struct>())).alpha as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(png_color_8_struct),
            "::",
            stringify!(alpha)
        )
    );
}
pub type png_color_8 = png_color_8_struct;
pub type png_color_8p = *mut png_color_8;
pub type png_const_color_8p = *const png_color_8;
pub type png_color_8pp = *mut *mut png_color_8;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct png_sPLT_entry_struct {
    pub red: png_uint_16,
    pub green: png_uint_16,
    pub blue: png_uint_16,
    pub alpha: png_uint_16,
    pub frequency: png_uint_16,
}
#[test]
fn bindgen_test_layout_png_sPLT_entry_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_sPLT_entry_struct>(),
        10usize,
        concat!("Size of: ", stringify!(png_sPLT_entry_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_sPLT_entry_struct>(),
        2usize,
        concat!("Alignment of ", stringify!(png_sPLT_entry_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_entry_struct>())).red as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_entry_struct),
            "::",
            stringify!(red)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_entry_struct>())).green as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_entry_struct),
            "::",
            stringify!(green)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_entry_struct>())).blue as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_entry_struct),
            "::",
            stringify!(blue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_entry_struct>())).alpha as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_entry_struct),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_entry_struct>())).frequency as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_entry_struct),
            "::",
            stringify!(frequency)
        )
    );
}
pub type png_sPLT_entry = png_sPLT_entry_struct;
pub type png_sPLT_entryp = *mut png_sPLT_entry;
pub type png_const_sPLT_entryp = *const png_sPLT_entry;
pub type png_sPLT_entrypp = *mut *mut png_sPLT_entry;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct png_sPLT_struct {
    pub name: png_charp,
    pub depth: png_byte,
    pub entries: png_sPLT_entryp,
    pub nentries: png_int_32,
}
#[test]
fn bindgen_test_layout_png_sPLT_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_sPLT_struct>(),
        32usize,
        concat!("Size of: ", stringify!(png_sPLT_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_sPLT_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(png_sPLT_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_struct>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_struct),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_struct>())).depth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_struct),
            "::",
            stringify!(depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_struct>())).entries as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_struct),
            "::",
            stringify!(entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_sPLT_struct>())).nentries as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(png_sPLT_struct),
            "::",
            stringify!(nentries)
        )
    );
}
impl Default for png_sPLT_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type png_sPLT_t = png_sPLT_struct;
pub type png_sPLT_tp = *mut png_sPLT_t;
pub type png_const_sPLT_tp = *const png_sPLT_t;
pub type png_sPLT_tpp = *mut *mut png_sPLT_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct png_text_struct {
    pub compression: ::std::os::raw::c_int,
    pub key: png_charp,
    pub text: png_charp,
    pub text_length: usize,
    pub itxt_length: usize,
    pub lang: png_charp,
    pub lang_key: png_charp,
}
#[test]
fn bindgen_test_layout_png_text_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_text_struct>(),
        56usize,
        concat!("Size of: ", stringify!(png_text_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_text_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(png_text_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).compression as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(compression)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).text as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).text_length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(text_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).itxt_length as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(itxt_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).lang as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(lang)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_text_struct>())).lang_key as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(png_text_struct),
            "::",
            stringify!(lang_key)
        )
    );
}
impl Default for png_text_struct {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type png_text = png_text_struct;
pub type png_textp = *mut png_text;
pub type png_const_textp = *const png_text;
pub type png_textpp = *mut *mut png_text;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct png_time_struct {
    pub year: png_uint_16,
    pub month: png_byte,
    pub day: png_byte,
    pub hour: png_byte,
    pub minute: png_byte,
    pub second: png_byte,
}
#[test]
fn bindgen_test_layout_png_time_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_time_struct>(),
        8usize,
        concat!("Size of: ", stringify!(png_time_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_time_struct>(),
        2usize,
        concat!("Alignment of ", stringify!(png_time_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_time_struct>())).year as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_time_struct),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_time_struct>())).month as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(png_time_struct),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_time_struct>())).day as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(png_time_struct),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_time_struct>())).hour as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(png_time_struct),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_time_struct>())).minute as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(png_time_struct),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_time_struct>())).second as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(png_time_struct),
            "::",
            stringify!(second)
        )
    );
}
pub type png_time = png_time_struct;
pub type png_timep = *mut png_time;
pub type png_const_timep = *const png_time;
pub type png_timepp = *mut *mut png_time;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct png_unknown_chunk_t {
    pub name: [png_byte; 5usize],
    pub data: *mut png_byte,
    pub size: usize,
    pub location: png_byte,
}
#[test]
fn bindgen_test_layout_png_unknown_chunk_t() {
    assert_eq!(
        ::std::mem::size_of::<png_unknown_chunk_t>(),
        32usize,
        concat!("Size of: ", stringify!(png_unknown_chunk_t))
    );
    assert_eq!(
        ::std::mem::align_of::<png_unknown_chunk_t>(),
        8usize,
        concat!("Alignment of ", stringify!(png_unknown_chunk_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_unknown_chunk_t>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_unknown_chunk_t),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_unknown_chunk_t>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_unknown_chunk_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_unknown_chunk_t>())).size as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(png_unknown_chunk_t),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_unknown_chunk_t>())).location as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(png_unknown_chunk_t),
            "::",
            stringify!(location)
        )
    );
}
impl Default for png_unknown_chunk_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type png_unknown_chunk = png_unknown_chunk_t;
pub type png_unknown_chunkp = *mut png_unknown_chunk;
pub type png_const_unknown_chunkp = *const png_unknown_chunk;
pub type png_unknown_chunkpp = *mut *mut png_unknown_chunk;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct png_row_info_struct {
    pub width: png_uint_32,
    pub rowbytes: usize,
    pub color_type: png_byte,
    pub bit_depth: png_byte,
    pub channels: png_byte,
    pub pixel_depth: png_byte,
}
#[test]
fn bindgen_test_layout_png_row_info_struct() {
    assert_eq!(
        ::std::mem::size_of::<png_row_info_struct>(),
        24usize,
        concat!("Size of: ", stringify!(png_row_info_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<png_row_info_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(png_row_info_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_row_info_struct>())).width as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_row_info_struct),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_row_info_struct>())).rowbytes as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_row_info_struct),
            "::",
            stringify!(rowbytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_row_info_struct>())).color_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(png_row_info_struct),
            "::",
            stringify!(color_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_row_info_struct>())).bit_depth as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(png_row_info_struct),
            "::",
            stringify!(bit_depth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_row_info_struct>())).channels as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(png_row_info_struct),
            "::",
            stringify!(channels)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_row_info_struct>())).pixel_depth as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(png_row_info_struct),
            "::",
            stringify!(pixel_depth)
        )
    );
}
pub type png_row_info = png_row_info_struct;
pub type png_row_infop = *mut png_row_info;
pub type png_row_infopp = *mut *mut png_row_info;
pub type png_error_ptr =
    ::std::option::Option<unsafe extern "C" fn(arg1: png_structp, arg2: png_const_charp)>;
pub type png_rw_ptr =
    ::std::option::Option<unsafe extern "C" fn(arg1: png_structp, arg2: png_bytep, arg3: usize)>;
pub type png_flush_ptr = ::std::option::Option<unsafe extern "C" fn(arg1: png_structp)>;
pub type png_read_status_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: png_structp, arg2: png_uint_32, arg3: ::std::os::raw::c_int),
>;
pub type png_write_status_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: png_structp, arg2: png_uint_32, arg3: ::std::os::raw::c_int),
>;
pub type png_progressive_info_ptr =
    ::std::option::Option<unsafe extern "C" fn(arg1: png_structp, arg2: png_infop)>;
pub type png_progressive_end_ptr =
    ::std::option::Option<unsafe extern "C" fn(arg1: png_structp, arg2: png_infop)>;
pub type png_progressive_row_ptr = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: png_structp,
        arg2: png_bytep,
        arg3: png_uint_32,
        arg4: ::std::os::raw::c_int,
    ),
>;
pub type png_user_transform_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: png_structp, arg2: png_row_infop, arg3: png_bytep),
>;
pub type png_user_chunk_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: png_structp, arg2: png_unknown_chunkp) -> ::std::os::raw::c_int,
>;
pub type png_longjmp_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut __jmp_buf_tag, arg2: ::std::os::raw::c_int),
>;
pub type png_malloc_ptr = ::std::option::Option<
    unsafe extern "C" fn(arg1: png_structp, arg2: png_alloc_size_t) -> png_voidp,
>;
pub type png_free_ptr =
    ::std::option::Option<unsafe extern "C" fn(arg1: png_structp, arg2: png_voidp)>;
extern "C" {
    pub fn png_access_version_number() -> png_uint_32;
}
extern "C" {
    pub fn png_set_sig_bytes(png_ptr: png_structrp, num_bytes: ::std::os::raw::c_int);
}
extern "C" {
    pub fn png_sig_cmp(
        sig: png_const_bytep,
        start: usize,
        num_to_check: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_create_read_struct(
        user_png_ver: png_const_charp,
        error_ptr: png_voidp,
        error_fn: png_error_ptr,
        warn_fn: png_error_ptr,
    ) -> png_structp;
}
extern "C" {
    pub fn png_create_write_struct(
        user_png_ver: png_const_charp,
        error_ptr: png_voidp,
        error_fn: png_error_ptr,
        warn_fn: png_error_ptr,
    ) -> png_structp;
}
extern "C" {
    pub fn png_get_compression_buffer_size(png_ptr: png_const_structrp) -> usize;
}
extern "C" {
    pub fn png_set_compression_buffer_size(png_ptr: png_structrp, size: usize);
}
extern "C" {
    pub fn png_set_longjmp_fn(
        png_ptr: png_structrp,
        longjmp_fn: png_longjmp_ptr,
        jmp_buf_size: usize,
    ) -> *mut jmp_buf;
}
extern "C" {
    pub fn png_longjmp(png_ptr: png_const_structrp, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn png_reset_zstream(png_ptr: png_structrp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_create_read_struct_2(
        user_png_ver: png_const_charp,
        error_ptr: png_voidp,
        error_fn: png_error_ptr,
        warn_fn: png_error_ptr,
        mem_ptr: png_voidp,
        malloc_fn: png_malloc_ptr,
        free_fn: png_free_ptr,
    ) -> png_structp;
}
extern "C" {
    pub fn png_create_write_struct_2(
        user_png_ver: png_const_charp,
        error_ptr: png_voidp,
        error_fn: png_error_ptr,
        warn_fn: png_error_ptr,
        mem_ptr: png_voidp,
        malloc_fn: png_malloc_ptr,
        free_fn: png_free_ptr,
    ) -> png_structp;
}
extern "C" {
    pub fn png_write_sig(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_write_chunk(
        png_ptr: png_structrp,
        chunk_name: png_const_bytep,
        data: png_const_bytep,
        length: usize,
    );
}
extern "C" {
    pub fn png_write_chunk_start(
        png_ptr: png_structrp,
        chunk_name: png_const_bytep,
        length: png_uint_32,
    );
}
extern "C" {
    pub fn png_write_chunk_data(png_ptr: png_structrp, data: png_const_bytep, length: usize);
}
extern "C" {
    pub fn png_write_chunk_end(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_create_info_struct(png_ptr: png_const_structrp) -> png_infop;
}
extern "C" {
    pub fn png_info_init_3(info_ptr: png_infopp, png_info_struct_size: usize);
}
extern "C" {
    pub fn png_write_info_before_PLTE(png_ptr: png_structrp, info_ptr: png_const_inforp);
}
extern "C" {
    pub fn png_write_info(png_ptr: png_structrp, info_ptr: png_const_inforp);
}
extern "C" {
    pub fn png_read_info(png_ptr: png_structrp, info_ptr: png_inforp);
}
extern "C" {
    pub fn png_convert_to_rfc1123(png_ptr: png_structrp, ptime: png_const_timep)
        -> png_const_charp;
}
extern "C" {
    pub fn png_convert_to_rfc1123_buffer(
        out: *mut ::std::os::raw::c_char,
        ptime: png_const_timep,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_convert_from_struct_tm(ptime: png_timep, ttime: *const tm);
}
extern "C" {
    pub fn png_convert_from_time_t(ptime: png_timep, ttime: time_t);
}
extern "C" {
    pub fn png_set_expand(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_expand_gray_1_2_4_to_8(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_palette_to_rgb(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_tRNS_to_alpha(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_expand_16(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_bgr(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_gray_to_rgb(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_rgb_to_gray(
        png_ptr: png_structrp,
        error_action: ::std::os::raw::c_int,
        red: f64,
        green: f64,
    );
}
extern "C" {
    pub fn png_set_rgb_to_gray_fixed(
        png_ptr: png_structrp,
        error_action: ::std::os::raw::c_int,
        red: png_fixed_point,
        green: png_fixed_point,
    );
}
extern "C" {
    pub fn png_get_rgb_to_gray_status(png_ptr: png_const_structrp) -> png_byte;
}
extern "C" {
    pub fn png_build_grayscale_palette(bit_depth: ::std::os::raw::c_int, palette: png_colorp);
}
extern "C" {
    pub fn png_set_alpha_mode(
        png_ptr: png_structrp,
        mode: ::std::os::raw::c_int,
        output_gamma: f64,
    );
}
extern "C" {
    pub fn png_set_alpha_mode_fixed(
        png_ptr: png_structrp,
        mode: ::std::os::raw::c_int,
        output_gamma: png_fixed_point,
    );
}
extern "C" {
    pub fn png_set_strip_alpha(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_swap_alpha(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_invert_alpha(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_filler(png_ptr: png_structrp, filler: png_uint_32, flags: ::std::os::raw::c_int);
}
extern "C" {
    pub fn png_set_add_alpha(
        png_ptr: png_structrp,
        filler: png_uint_32,
        flags: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_set_swap(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_packing(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_packswap(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_shift(png_ptr: png_structrp, true_bits: png_const_color_8p);
}
extern "C" {
    pub fn png_set_interlace_handling(png_ptr: png_structrp) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_set_invert_mono(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_background(
        png_ptr: png_structrp,
        background_color: png_const_color_16p,
        background_gamma_code: ::std::os::raw::c_int,
        need_expand: ::std::os::raw::c_int,
        background_gamma: f64,
    );
}
extern "C" {
    pub fn png_set_background_fixed(
        png_ptr: png_structrp,
        background_color: png_const_color_16p,
        background_gamma_code: ::std::os::raw::c_int,
        need_expand: ::std::os::raw::c_int,
        background_gamma: png_fixed_point,
    );
}
extern "C" {
    pub fn png_set_scale_16(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_strip_16(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_set_quantize(
        png_ptr: png_structrp,
        palette: png_colorp,
        num_palette: ::std::os::raw::c_int,
        maximum_colors: ::std::os::raw::c_int,
        histogram: png_const_uint_16p,
        full_quantize: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_set_gamma(png_ptr: png_structrp, screen_gamma: f64, override_file_gamma: f64);
}
extern "C" {
    pub fn png_set_gamma_fixed(
        png_ptr: png_structrp,
        screen_gamma: png_fixed_point,
        override_file_gamma: png_fixed_point,
    );
}
extern "C" {
    pub fn png_set_flush(png_ptr: png_structrp, nrows: ::std::os::raw::c_int);
}
extern "C" {
    pub fn png_write_flush(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_start_read_image(png_ptr: png_structrp);
}
extern "C" {
    pub fn png_read_update_info(png_ptr: png_structrp, info_ptr: png_inforp);
}
extern "C" {
    pub fn png_read_rows(
        png_ptr: png_structrp,
        row: png_bytepp,
        display_row: png_bytepp,
        num_rows: png_uint_32,
    );
}
extern "C" {
    pub fn png_read_row(png_ptr: png_structrp, row: png_bytep, display_row: png_bytep);
}
extern "C" {
    pub fn png_read_image(png_ptr: png_structrp, image: png_bytepp);
}
extern "C" {
    pub fn png_write_row(png_ptr: png_structrp, row: png_const_bytep);
}
extern "C" {
    pub fn png_write_rows(png_ptr: png_structrp, row: png_bytepp, num_rows: png_uint_32);
}
extern "C" {
    pub fn png_write_image(png_ptr: png_structrp, image: png_bytepp);
}
extern "C" {
    pub fn png_write_end(png_ptr: png_structrp, info_ptr: png_inforp);
}
extern "C" {
    pub fn png_read_end(png_ptr: png_structrp, info_ptr: png_inforp);
}
extern "C" {
    pub fn png_destroy_info_struct(png_ptr: png_const_structrp, info_ptr_ptr: png_infopp);
}
extern "C" {
    pub fn png_destroy_read_struct(
        png_ptr_ptr: png_structpp,
        info_ptr_ptr: png_infopp,
        end_info_ptr_ptr: png_infopp,
    );
}
extern "C" {
    pub fn png_destroy_write_struct(png_ptr_ptr: png_structpp, info_ptr_ptr: png_infopp);
}
extern "C" {
    pub fn png_set_crc_action(
        png_ptr: png_structrp,
        crit_action: ::std::os::raw::c_int,
        ancil_action: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_set_filter(
        png_ptr: png_structrp,
        method: ::std::os::raw::c_int,
        filters: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_set_filter_heuristics(
        png_ptr: png_structrp,
        heuristic_method: ::std::os::raw::c_int,
        num_weights: ::std::os::raw::c_int,
        filter_weights: png_const_doublep,
        filter_costs: png_const_doublep,
    );
}
extern "C" {
    pub fn png_set_filter_heuristics_fixed(
        png_ptr: png_structrp,
        heuristic_method: ::std::os::raw::c_int,
        num_weights: ::std::os::raw::c_int,
        filter_weights: png_const_fixed_point_p,
        filter_costs: png_const_fixed_point_p,
    );
}
extern "C" {
    pub fn png_set_compression_level(png_ptr: png_structrp, level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn png_set_compression_mem_level(png_ptr: png_structrp, mem_level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn png_set_compression_strategy(png_ptr: png_structrp, strategy: ::std::os::raw::c_int);
}
extern "C" {
    pub fn png_set_compression_window_bits(
        png_ptr: png_structrp,
        window_bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_set_compression_method(png_ptr: png_structrp, method: ::std::os::raw::c_int);
}
extern "C" {
    pub fn png_set_text_compression_level(png_ptr: png_structrp, level: ::std::os::raw::c_int);
}
extern "C" {
    pub fn png_set_text_compression_mem_level(
        png_ptr: png_structrp,
        mem_level: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_set_text_compression_strategy(
        png_ptr: png_structrp,
        strategy: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_set_text_compression_window_bits(
        png_ptr: png_structrp,
        window_bits: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_set_text_compression_method(png_ptr: png_structrp, method: ::std::os::raw::c_int);
}
extern "C" {
    pub fn png_init_io(png_ptr: png_structrp, fp: png_FILE_p);
}
extern "C" {
    pub fn png_set_error_fn(
        png_ptr: png_structrp,
        error_ptr: png_voidp,
        error_fn: png_error_ptr,
        warning_fn: png_error_ptr,
    );
}
extern "C" {
    pub fn png_get_error_ptr(png_ptr: png_const_structrp) -> png_voidp;
}
extern "C" {
    pub fn png_set_write_fn(
        png_ptr: png_structrp,
        io_ptr: png_voidp,
        write_data_fn: png_rw_ptr,
        output_flush_fn: png_flush_ptr,
    );
}
extern "C" {
    pub fn png_set_read_fn(png_ptr: png_structrp, io_ptr: png_voidp, read_data_fn: png_rw_ptr);
}
extern "C" {
    pub fn png_get_io_ptr(png_ptr: png_const_structrp) -> png_voidp;
}
extern "C" {
    pub fn png_set_read_status_fn(png_ptr: png_structrp, read_row_fn: png_read_status_ptr);
}
extern "C" {
    pub fn png_set_write_status_fn(png_ptr: png_structrp, write_row_fn: png_write_status_ptr);
}
extern "C" {
    pub fn png_set_mem_fn(
        png_ptr: png_structrp,
        mem_ptr: png_voidp,
        malloc_fn: png_malloc_ptr,
        free_fn: png_free_ptr,
    );
}
extern "C" {
    pub fn png_get_mem_ptr(png_ptr: png_const_structrp) -> png_voidp;
}
extern "C" {
    pub fn png_set_read_user_transform_fn(
        png_ptr: png_structrp,
        read_user_transform_fn: png_user_transform_ptr,
    );
}
extern "C" {
    pub fn png_set_write_user_transform_fn(
        png_ptr: png_structrp,
        write_user_transform_fn: png_user_transform_ptr,
    );
}
extern "C" {
    pub fn png_set_user_transform_info(
        png_ptr: png_structrp,
        user_transform_ptr: png_voidp,
        user_transform_depth: ::std::os::raw::c_int,
        user_transform_channels: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_get_user_transform_ptr(png_ptr: png_const_structrp) -> png_voidp;
}
extern "C" {
    pub fn png_get_current_row_number(arg1: png_const_structrp) -> png_uint_32;
}
extern "C" {
    pub fn png_get_current_pass_number(arg1: png_const_structrp) -> png_byte;
}
extern "C" {
    pub fn png_set_read_user_chunk_fn(
        png_ptr: png_structrp,
        user_chunk_ptr: png_voidp,
        read_user_chunk_fn: png_user_chunk_ptr,
    );
}
extern "C" {
    pub fn png_get_user_chunk_ptr(png_ptr: png_const_structrp) -> png_voidp;
}
extern "C" {
    pub fn png_set_progressive_read_fn(
        png_ptr: png_structrp,
        progressive_ptr: png_voidp,
        info_fn: png_progressive_info_ptr,
        row_fn: png_progressive_row_ptr,
        end_fn: png_progressive_end_ptr,
    );
}
extern "C" {
    pub fn png_get_progressive_ptr(png_ptr: png_const_structrp) -> png_voidp;
}
extern "C" {
    pub fn png_process_data(
        png_ptr: png_structrp,
        info_ptr: png_inforp,
        buffer: png_bytep,
        buffer_size: usize,
    );
}
extern "C" {
    pub fn png_process_data_pause(arg1: png_structrp, save: ::std::os::raw::c_int) -> usize;
}
extern "C" {
    pub fn png_process_data_skip(arg1: png_structrp) -> png_uint_32;
}
extern "C" {
    pub fn png_progressive_combine_row(
        png_ptr: png_const_structrp,
        old_row: png_bytep,
        new_row: png_const_bytep,
    );
}
extern "C" {
    pub fn png_malloc(png_ptr: png_const_structrp, size: png_alloc_size_t) -> png_voidp;
}
extern "C" {
    pub fn png_calloc(png_ptr: png_const_structrp, size: png_alloc_size_t) -> png_voidp;
}
extern "C" {
    pub fn png_malloc_warn(png_ptr: png_const_structrp, size: png_alloc_size_t) -> png_voidp;
}
extern "C" {
    pub fn png_free(png_ptr: png_const_structrp, ptr: png_voidp);
}
extern "C" {
    pub fn png_free_data(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        free_me: png_uint_32,
        num: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_data_freer(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        freer: ::std::os::raw::c_int,
        mask: png_uint_32,
    );
}
extern "C" {
    pub fn png_malloc_default(png_ptr: png_const_structrp, size: png_alloc_size_t) -> png_voidp;
}
extern "C" {
    pub fn png_free_default(png_ptr: png_const_structrp, ptr: png_voidp);
}
extern "C" {
    pub fn png_error(png_ptr: png_const_structrp, error_message: png_const_charp);
}
extern "C" {
    pub fn png_chunk_error(png_ptr: png_const_structrp, error_message: png_const_charp);
}
extern "C" {
    pub fn png_warning(png_ptr: png_const_structrp, warning_message: png_const_charp);
}
extern "C" {
    pub fn png_chunk_warning(png_ptr: png_const_structrp, warning_message: png_const_charp);
}
extern "C" {
    pub fn png_benign_error(png_ptr: png_const_structrp, warning_message: png_const_charp);
}
extern "C" {
    pub fn png_chunk_benign_error(png_ptr: png_const_structrp, warning_message: png_const_charp);
}
extern "C" {
    pub fn png_set_benign_errors(png_ptr: png_structrp, allowed: ::std::os::raw::c_int);
}
extern "C" {
    pub fn png_get_valid(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        flag: png_uint_32,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_rowbytes(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> usize;
}
extern "C" {
    pub fn png_get_rows(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> png_bytepp;
}
extern "C" {
    pub fn png_set_rows(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        row_pointers: png_bytepp,
    );
}
extern "C" {
    pub fn png_get_channels(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> png_byte;
}
extern "C" {
    pub fn png_get_image_width(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_image_height(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_bit_depth(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> png_byte;
}
extern "C" {
    pub fn png_get_color_type(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> png_byte;
}
extern "C" {
    pub fn png_get_filter_type(png_ptr: png_const_structrp, info_ptr: png_const_inforp)
        -> png_byte;
}
extern "C" {
    pub fn png_get_interlace_type(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_byte;
}
extern "C" {
    pub fn png_get_compression_type(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_byte;
}
extern "C" {
    pub fn png_get_pixels_per_meter(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_x_pixels_per_meter(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_y_pixels_per_meter(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_pixel_aspect_ratio(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> f32;
}
extern "C" {
    pub fn png_get_pixel_aspect_ratio_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_fixed_point;
}
extern "C" {
    pub fn png_get_x_offset_pixels(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_int_32;
}
extern "C" {
    pub fn png_get_y_offset_pixels(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_int_32;
}
extern "C" {
    pub fn png_get_x_offset_microns(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_int_32;
}
extern "C" {
    pub fn png_get_y_offset_microns(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_int_32;
}
extern "C" {
    pub fn png_get_signature(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_const_bytep;
}
extern "C" {
    pub fn png_get_bKGD(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        background: *mut png_color_16p,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_bKGD(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        background: png_const_color_16p,
    );
}
extern "C" {
    pub fn png_get_cHRM(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        white_x: *mut f64,
        white_y: *mut f64,
        red_x: *mut f64,
        red_y: *mut f64,
        green_x: *mut f64,
        green_y: *mut f64,
        blue_x: *mut f64,
        blue_y: *mut f64,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_cHRM_XYZ(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        red_X: *mut f64,
        red_Y: *mut f64,
        red_Z: *mut f64,
        green_X: *mut f64,
        green_Y: *mut f64,
        green_Z: *mut f64,
        blue_X: *mut f64,
        blue_Y: *mut f64,
        blue_Z: *mut f64,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_cHRM_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        int_white_x: *mut png_fixed_point,
        int_white_y: *mut png_fixed_point,
        int_red_x: *mut png_fixed_point,
        int_red_y: *mut png_fixed_point,
        int_green_x: *mut png_fixed_point,
        int_green_y: *mut png_fixed_point,
        int_blue_x: *mut png_fixed_point,
        int_blue_y: *mut png_fixed_point,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_cHRM_XYZ_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        int_red_X: *mut png_fixed_point,
        int_red_Y: *mut png_fixed_point,
        int_red_Z: *mut png_fixed_point,
        int_green_X: *mut png_fixed_point,
        int_green_Y: *mut png_fixed_point,
        int_green_Z: *mut png_fixed_point,
        int_blue_X: *mut png_fixed_point,
        int_blue_Y: *mut png_fixed_point,
        int_blue_Z: *mut png_fixed_point,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_cHRM(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        white_x: f64,
        white_y: f64,
        red_x: f64,
        red_y: f64,
        green_x: f64,
        green_y: f64,
        blue_x: f64,
        blue_y: f64,
    );
}
extern "C" {
    pub fn png_set_cHRM_XYZ(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        red_X: f64,
        red_Y: f64,
        red_Z: f64,
        green_X: f64,
        green_Y: f64,
        green_Z: f64,
        blue_X: f64,
        blue_Y: f64,
        blue_Z: f64,
    );
}
extern "C" {
    pub fn png_set_cHRM_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        int_white_x: png_fixed_point,
        int_white_y: png_fixed_point,
        int_red_x: png_fixed_point,
        int_red_y: png_fixed_point,
        int_green_x: png_fixed_point,
        int_green_y: png_fixed_point,
        int_blue_x: png_fixed_point,
        int_blue_y: png_fixed_point,
    );
}
extern "C" {
    pub fn png_set_cHRM_XYZ_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        int_red_X: png_fixed_point,
        int_red_Y: png_fixed_point,
        int_red_Z: png_fixed_point,
        int_green_X: png_fixed_point,
        int_green_Y: png_fixed_point,
        int_green_Z: png_fixed_point,
        int_blue_X: png_fixed_point,
        int_blue_Y: png_fixed_point,
        int_blue_Z: png_fixed_point,
    );
}
extern "C" {
    pub fn png_get_eXIf(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        exif: *mut png_bytep,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_eXIf(png_ptr: png_const_structrp, info_ptr: png_inforp, exif: png_bytep);
}
extern "C" {
    pub fn png_get_eXIf_1(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        num_exif: *mut png_uint_32,
        exif: *mut png_bytep,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_eXIf_1(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        num_exif: png_uint_32,
        exif: png_bytep,
    );
}
extern "C" {
    pub fn png_get_gAMA(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        file_gamma: *mut f64,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_gAMA_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        int_file_gamma: *mut png_fixed_point,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_gAMA(png_ptr: png_const_structrp, info_ptr: png_inforp, file_gamma: f64);
}
extern "C" {
    pub fn png_set_gAMA_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        int_file_gamma: png_fixed_point,
    );
}
extern "C" {
    pub fn png_get_hIST(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        hist: *mut png_uint_16p,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_hIST(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        hist: png_const_uint_16p,
    );
}
extern "C" {
    pub fn png_get_IHDR(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        width: *mut png_uint_32,
        height: *mut png_uint_32,
        bit_depth: *mut ::std::os::raw::c_int,
        color_type: *mut ::std::os::raw::c_int,
        interlace_method: *mut ::std::os::raw::c_int,
        compression_method: *mut ::std::os::raw::c_int,
        filter_method: *mut ::std::os::raw::c_int,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_IHDR(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        width: png_uint_32,
        height: png_uint_32,
        bit_depth: ::std::os::raw::c_int,
        color_type: ::std::os::raw::c_int,
        interlace_method: ::std::os::raw::c_int,
        compression_method: ::std::os::raw::c_int,
        filter_method: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_get_oFFs(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        offset_x: *mut png_int_32,
        offset_y: *mut png_int_32,
        unit_type: *mut ::std::os::raw::c_int,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_oFFs(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        offset_x: png_int_32,
        offset_y: png_int_32,
        unit_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_get_pCAL(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        purpose: *mut png_charp,
        X0: *mut png_int_32,
        X1: *mut png_int_32,
        type_: *mut ::std::os::raw::c_int,
        nparams: *mut ::std::os::raw::c_int,
        units: *mut png_charp,
        params: *mut png_charpp,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_pCAL(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        purpose: png_const_charp,
        X0: png_int_32,
        X1: png_int_32,
        type_: ::std::os::raw::c_int,
        nparams: ::std::os::raw::c_int,
        units: png_const_charp,
        params: png_charpp,
    );
}
extern "C" {
    pub fn png_get_pHYs(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        res_x: *mut png_uint_32,
        res_y: *mut png_uint_32,
        unit_type: *mut ::std::os::raw::c_int,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_pHYs(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        res_x: png_uint_32,
        res_y: png_uint_32,
        unit_type: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_get_PLTE(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        palette: *mut png_colorp,
        num_palette: *mut ::std::os::raw::c_int,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_PLTE(
        png_ptr: png_structrp,
        info_ptr: png_inforp,
        palette: png_const_colorp,
        num_palette: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_get_sBIT(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        sig_bit: *mut png_color_8p,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_sBIT(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        sig_bit: png_const_color_8p,
    );
}
extern "C" {
    pub fn png_get_sRGB(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        file_srgb_intent: *mut ::std::os::raw::c_int,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_sRGB(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        srgb_intent: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_set_sRGB_gAMA_and_cHRM(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        srgb_intent: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_get_iCCP(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        name: png_charpp,
        compression_type: *mut ::std::os::raw::c_int,
        profile: png_bytepp,
        proflen: *mut png_uint_32,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_iCCP(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        name: png_const_charp,
        compression_type: ::std::os::raw::c_int,
        profile: png_const_bytep,
        proflen: png_uint_32,
    );
}
extern "C" {
    pub fn png_get_sPLT(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        entries: png_sPLT_tpp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_set_sPLT(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        entries: png_const_sPLT_tp,
        nentries: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_get_text(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        text_ptr: *mut png_textp,
        num_text: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_set_text(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        text_ptr: png_const_textp,
        num_text: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_get_tIME(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        mod_time: *mut png_timep,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_tIME(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        mod_time: png_const_timep,
    );
}
extern "C" {
    pub fn png_get_tRNS(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        trans_alpha: *mut png_bytep,
        num_trans: *mut ::std::os::raw::c_int,
        trans_color: *mut png_color_16p,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_tRNS(
        png_ptr: png_structrp,
        info_ptr: png_inforp,
        trans_alpha: png_const_bytep,
        num_trans: ::std::os::raw::c_int,
        trans_color: png_const_color_16p,
    );
}
extern "C" {
    pub fn png_get_sCAL(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        unit: *mut ::std::os::raw::c_int,
        width: *mut f64,
        height: *mut f64,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_sCAL_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        unit: *mut ::std::os::raw::c_int,
        width: *mut png_fixed_point,
        height: *mut png_fixed_point,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_sCAL_s(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        unit: *mut ::std::os::raw::c_int,
        swidth: png_charpp,
        sheight: png_charpp,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_sCAL(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        unit: ::std::os::raw::c_int,
        width: f64,
        height: f64,
    );
}
extern "C" {
    pub fn png_set_sCAL_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        unit: ::std::os::raw::c_int,
        width: png_fixed_point,
        height: png_fixed_point,
    );
}
extern "C" {
    pub fn png_set_sCAL_s(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        unit: ::std::os::raw::c_int,
        swidth: png_const_charp,
        sheight: png_const_charp,
    );
}
extern "C" {
    pub fn png_set_keep_unknown_chunks(
        png_ptr: png_structrp,
        keep: ::std::os::raw::c_int,
        chunk_list: png_const_bytep,
        num_chunks: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_handle_as_unknown(
        png_ptr: png_const_structrp,
        chunk_name: png_const_bytep,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_set_unknown_chunks(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        unknowns: png_const_unknown_chunkp,
        num_unknowns: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_set_unknown_chunk_location(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        chunk: ::std::os::raw::c_int,
        location: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_get_unknown_chunks(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        entries: png_unknown_chunkpp,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_set_invalid(
        png_ptr: png_const_structrp,
        info_ptr: png_inforp,
        mask: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn png_read_png(
        png_ptr: png_structrp,
        info_ptr: png_inforp,
        transforms: ::std::os::raw::c_int,
        params: png_voidp,
    );
}
extern "C" {
    pub fn png_write_png(
        png_ptr: png_structrp,
        info_ptr: png_inforp,
        transforms: ::std::os::raw::c_int,
        params: png_voidp,
    );
}
extern "C" {
    pub fn png_get_copyright(png_ptr: png_const_structrp) -> png_const_charp;
}
extern "C" {
    pub fn png_get_header_ver(png_ptr: png_const_structrp) -> png_const_charp;
}
extern "C" {
    pub fn png_get_header_version(png_ptr: png_const_structrp) -> png_const_charp;
}
extern "C" {
    pub fn png_get_libpng_ver(png_ptr: png_const_structrp) -> png_const_charp;
}
extern "C" {
    pub fn png_permit_mng_features(
        png_ptr: png_structrp,
        mng_features_permitted: png_uint_32,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_set_user_limits(
        png_ptr: png_structrp,
        user_width_max: png_uint_32,
        user_height_max: png_uint_32,
    );
}
extern "C" {
    pub fn png_get_user_width_max(png_ptr: png_const_structrp) -> png_uint_32;
}
extern "C" {
    pub fn png_get_user_height_max(png_ptr: png_const_structrp) -> png_uint_32;
}
extern "C" {
    pub fn png_set_chunk_cache_max(png_ptr: png_structrp, user_chunk_cache_max: png_uint_32);
}
extern "C" {
    pub fn png_get_chunk_cache_max(png_ptr: png_const_structrp) -> png_uint_32;
}
extern "C" {
    pub fn png_set_chunk_malloc_max(png_ptr: png_structrp, user_chunk_cache_max: png_alloc_size_t);
}
extern "C" {
    pub fn png_get_chunk_malloc_max(png_ptr: png_const_structrp) -> png_alloc_size_t;
}
extern "C" {
    pub fn png_get_pixels_per_inch(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_x_pixels_per_inch(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_y_pixels_per_inch(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_x_offset_inches(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> f32;
}
extern "C" {
    pub fn png_get_x_offset_inches_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_fixed_point;
}
extern "C" {
    pub fn png_get_y_offset_inches(png_ptr: png_const_structrp, info_ptr: png_const_inforp) -> f32;
}
extern "C" {
    pub fn png_get_y_offset_inches_fixed(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
    ) -> png_fixed_point;
}
extern "C" {
    pub fn png_get_pHYs_dpi(
        png_ptr: png_const_structrp,
        info_ptr: png_const_inforp,
        res_x: *mut png_uint_32,
        res_y: *mut png_uint_32,
        unit_type: *mut ::std::os::raw::c_int,
    ) -> png_uint_32;
}
extern "C" {
    pub fn png_get_io_state(png_ptr: png_const_structrp) -> png_uint_32;
}
extern "C" {
    pub fn png_get_io_chunk_type(png_ptr: png_const_structrp) -> png_uint_32;
}
extern "C" {
    pub fn png_get_uint_32(buf: png_const_bytep) -> png_uint_32;
}
extern "C" {
    pub fn png_get_uint_16(buf: png_const_bytep) -> png_uint_16;
}
extern "C" {
    pub fn png_get_int_32(buf: png_const_bytep) -> png_int_32;
}
extern "C" {
    pub fn png_get_uint_31(png_ptr: png_const_structrp, buf: png_const_bytep) -> png_uint_32;
}
extern "C" {
    pub fn png_save_uint_32(buf: png_bytep, i: png_uint_32);
}
extern "C" {
    pub fn png_save_int_32(buf: png_bytep, i: png_int_32);
}
extern "C" {
    pub fn png_save_uint_16(buf: png_bytep, i: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn png_set_check_for_invalid_index(png_ptr: png_structrp, allowed: ::std::os::raw::c_int);
}
extern "C" {
    pub fn png_get_palette_max(
        png_ptr: png_const_structp,
        info_ptr: png_const_infop,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct png_control {
    _unused: [u8; 0],
}
pub type png_controlp = *mut png_control;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct png_image {
    pub opaque: png_controlp,
    pub version: png_uint_32,
    pub width: png_uint_32,
    pub height: png_uint_32,
    pub format: png_uint_32,
    pub flags: png_uint_32,
    pub colormap_entries: png_uint_32,
    pub warning_or_error: png_uint_32,
    pub message: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_png_image() {
    assert_eq!(
        ::std::mem::size_of::<png_image>(),
        104usize,
        concat!("Size of: ", stringify!(png_image))
    );
    assert_eq!(
        ::std::mem::align_of::<png_image>(),
        8usize,
        concat!("Alignment of ", stringify!(png_image))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).opaque as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(opaque)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).version as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).width as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).height as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).format as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).colormap_entries as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(colormap_entries)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).warning_or_error as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(warning_or_error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<png_image>())).message as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(png_image),
            "::",
            stringify!(message)
        )
    );
}
impl Default for png_image {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type png_imagep = *mut png_image;
extern "C" {
    pub fn png_image_begin_read_from_file(
        image: png_imagep,
        file_name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_image_begin_read_from_stdio(
        image: png_imagep,
        file: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_image_begin_read_from_memory(
        image: png_imagep,
        memory: png_const_voidp,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_image_finish_read(
        image: png_imagep,
        background: png_const_colorp,
        buffer: *mut ::std::os::raw::c_void,
        row_stride: png_int_32,
        colormap: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_image_free(image: png_imagep);
}
extern "C" {
    pub fn png_image_write_to_file(
        image: png_imagep,
        file: *const ::std::os::raw::c_char,
        convert_to_8bit: ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_void,
        row_stride: png_int_32,
        colormap: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_image_write_to_stdio(
        image: png_imagep,
        file: *mut FILE,
        convert_to_8_bit: ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_void,
        row_stride: png_int_32,
        colormap: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_image_write_to_memory(
        image: png_imagep,
        memory: *mut ::std::os::raw::c_void,
        memory_bytes: *mut png_alloc_size_t,
        convert_to_8_bit: ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_void,
        row_stride: png_int_32,
        colormap: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn png_set_option(
        png_ptr: png_structrp,
        option: ::std::os::raw::c_int,
        onoff: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn MyWebPSafeMalloc(nmemb: u64, size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn MyWebPSafeFree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn ReadJPEG(
        data: *const u8,
        data_size: usize,
        pic: *mut WebPPicture,
        keep_alpha: ::std::os::raw::c_int,
        metadata: *mut Metadata,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ReadPNG(
        data: *const u8,
        data_size: usize,
        pic: *mut WebPPicture,
        keep_alpha: ::std::os::raw::c_int,
        metadata: *mut Metadata,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImgIoUtilSetBinaryMode(file: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn ImgIoUtilReadFile(
        file_name: *const ::std::os::raw::c_char,
        data: *mut *const u8,
        data_size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImgIoUtilReadFromStdin(
        data: *mut *const u8,
        data_size: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImgIoUtilWriteFile(
        file_name: *const ::std::os::raw::c_char,
        data: *const u8,
        data_size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImgIoUtilCopyPlane(
        src: *const u8,
        src_stride: ::std::os::raw::c_int,
        dst: *mut u8,
        dst_stride: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImgIoUtilCheckSizeArgumentsOverflow(nmemb: u64, size: usize) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MetadataPayload {
    pub bytes: *mut u8,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_MetadataPayload() {
    assert_eq!(
        ::std::mem::size_of::<MetadataPayload>(),
        16usize,
        concat!("Size of: ", stringify!(MetadataPayload))
    );
    assert_eq!(
        ::std::mem::align_of::<MetadataPayload>(),
        8usize,
        concat!("Alignment of ", stringify!(MetadataPayload))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MetadataPayload>())).bytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MetadataPayload),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MetadataPayload>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MetadataPayload),
            "::",
            stringify!(size)
        )
    );
}
impl Default for MetadataPayload {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Metadata {
    pub exif: MetadataPayload,
    pub iccp: MetadataPayload,
    pub xmp: MetadataPayload,
}
#[test]
fn bindgen_test_layout_Metadata() {
    assert_eq!(
        ::std::mem::size_of::<Metadata>(),
        48usize,
        concat!("Size of: ", stringify!(Metadata))
    );
    assert_eq!(
        ::std::mem::align_of::<Metadata>(),
        8usize,
        concat!("Alignment of ", stringify!(Metadata))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).exif as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(exif)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).iccp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(iccp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Metadata>())).xmp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Metadata),
            "::",
            stringify!(xmp)
        )
    );
}
impl Default for Metadata {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
extern "C" {
    pub fn MetadataInit(metadata: *mut Metadata);
}
extern "C" {
    pub fn MetadataPayloadDelete(payload: *mut MetadataPayload);
}
extern "C" {
    pub fn MetadataFree(metadata: *mut Metadata);
}
extern "C" {
    pub fn MetadataCopy(
        metadata: *const ::std::os::raw::c_char,
        metadata_len: usize,
        payload: *mut MetadataPayload,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn WriteWebPWithMetadata(
        out: *mut WebPMemoryWriter,
        picture: *const WebPPicture,
        memory_writer: *const WebPMemoryWriter,
        metadata: *const Metadata,
        keep_metadata: ::std::os::raw::c_int,
        metadata_written: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BufferSource {
    pub buf: *mut ::std::os::raw::c_uchar,
    pub p: *mut ::std::os::raw::c_uchar,
    pub remain: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_BufferSource() {
    assert_eq!(
        ::std::mem::size_of::<BufferSource>(),
        24usize,
        concat!("Size of: ", stringify!(BufferSource))
    );
    assert_eq!(
        ::std::mem::align_of::<BufferSource>(),
        8usize,
        concat!("Alignment of ", stringify!(BufferSource))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferSource>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferSource),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferSource>())).p as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferSource),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BufferSource>())).remain as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(BufferSource),
            "::",
            stringify!(remain)
        )
    );
}
impl Default for BufferSource {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const GIFDisposeMethod_GIF_DISPOSE_NONE: GIFDisposeMethod = 0;
pub const GIFDisposeMethod_GIF_DISPOSE_BACKGROUND: GIFDisposeMethod = 1;
pub const GIFDisposeMethod_GIF_DISPOSE_RESTORE_PREVIOUS: GIFDisposeMethod = 2;
pub type GIFDisposeMethod = u32;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct GIFFrameRect {
    pub x_offset: ::std::os::raw::c_int,
    pub y_offset: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_GIFFrameRect() {
    assert_eq!(
        ::std::mem::size_of::<GIFFrameRect>(),
        16usize,
        concat!("Size of: ", stringify!(GIFFrameRect))
    );
    assert_eq!(
        ::std::mem::align_of::<GIFFrameRect>(),
        4usize,
        concat!("Alignment of ", stringify!(GIFFrameRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GIFFrameRect>())).x_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GIFFrameRect),
            "::",
            stringify!(x_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GIFFrameRect>())).y_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GIFFrameRect),
            "::",
            stringify!(y_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GIFFrameRect>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GIFFrameRect),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GIFFrameRect>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GIFFrameRect),
            "::",
            stringify!(height)
        )
    );
}
extern "C" {
    pub fn GIFGetBackgroundColor(
        color_map: *const ColorMapObject,
        bgcolor_index: ::std::os::raw::c_int,
        transparent_index: ::std::os::raw::c_int,
        bgcolor: *mut u32,
    );
}
extern "C" {
    pub fn GIFReadGraphicsExtension(
        buf: *const GifByteType,
        duration: *mut ::std::os::raw::c_int,
        dispose: *mut GIFDisposeMethod,
        transparent_index: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GIFReadFrame(
        gif: *mut GifFileType,
        transparent_index: ::std::os::raw::c_int,
        gif_rect: *mut GIFFrameRect,
        picture: *mut WebPPicture,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GIFReadLoopCount(
        gif: *mut GifFileType,
        buf: *mut *mut GifByteType,
        loop_count: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GIFReadMetadata(
        gif: *mut GifFileType,
        buf: *mut *mut GifByteType,
        metadata: *mut WebPData,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GIFDisposeFrame(
        dispose: GIFDisposeMethod,
        rect: *const GIFFrameRect,
        prev_canvas: *const WebPPicture,
        curr_canvas: *mut WebPPicture,
    );
}
extern "C" {
    pub fn GIFBlendFrames(
        src: *const WebPPicture,
        rect: *const GIFFrameRect,
        dst: *mut WebPPicture,
    );
}
extern "C" {
    pub fn GIFDisplayError(gif: *const GifFileType, gif_error: ::std::os::raw::c_int);
}
extern "C" {
    pub fn GIFClearPic(pic: *mut WebPPicture, rect: *const GIFFrameRect);
}
extern "C" {
    pub fn GIFCopyPixels(src: *const WebPPicture, dst: *mut WebPPicture);
}
extern "C" {
    pub fn readGifBuffer(
        gf: *mut GifFileType,
        buf: *mut GifByteType,
        length: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PWebPDataInit(webp_data: *mut WebPData);
}
extern "C" {
    pub fn PWebPDataClear(webp_data: *mut WebPData);
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
impl Default for __va_list_tag {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
